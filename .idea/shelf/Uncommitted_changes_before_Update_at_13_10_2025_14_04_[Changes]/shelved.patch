Index: examples/golden_brain_phantom.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/usr/bin/env python3\r\n\"\"\"\r\nGolden-angle tomography senza z5py\r\nCarica brain_map.zarr come array NumPy e usa JSON metadati\r\nSalva proiezione di test e stack di proiezioni\r\n\"\"\"\r\n\r\nimport os\r\nimport numpy as np\r\nimport zarr\r\nimport json\r\nimport matplotlib.pyplot as plt\r\nfrom msim.simulator import XRayScanner\r\n\r\n#--------------------------------------------\r\ndef main():\r\n    base_path = \"/data2/Noemi/MSim/examples\"\r\n    zarr_file = os.path.join(base_path, \"brain_map.zarr\")\r\n    json_file = os.path.join(base_path, \"brain_lookup.json\")\r\n    config_file = os.path.join(base_path, \"enhanced_config.json\")\r\n\r\n    # Controllo esistenza dei file\r\n    for f in [zarr_file, json_file, config_file]:\r\n        if not os.path.exists(f):\r\n            raise FileNotFoundError(f\"{f} non trovato\")\r\n\r\n    # 1\uFE0F⃣ Carica Zarr come array NumPy\r\n    print(f\"Caricando Zarr originale: {zarr_file}\")\r\n    z = zarr.open(zarr_file, mode='r')\r\n    volume_data = z[:]\r\n    print(f\"Volume shape: {volume_data.shape}\")\r\n\r\n    # 2\uFE0F⃣ Carica metadati JSON\r\n    with open(json_file, 'r') as f:\r\n        metadata = json.load(f)\r\n\r\n    lookup = metadata[\"lookup\"]\r\n    voxel_size = metadata.get(\"voxel_size\", [1.0, 1.0, 1.0])\r\n\r\n    # 3\uFE0F⃣ Proiezione di test (vista frontale)\r\n    proj_test = volume_data.sum(axis=0)\r\n    proj_norm = (proj_test - proj_test.min()) / (proj_test.max() - proj_test.min() + 1e-8)\r\n    test_png = os.path.join(base_path, \"proiezione_test.png\")\r\n    plt.imsave(test_png, proj_norm, cmap='gray')\r\n    print(f\"Proiezione di test salvata come: {test_png}\")\r\n\r\n    # 4\uFE0F⃣ Setup scanner\r\n    scanner = XRayScanner(config_file)\r\n    scanner.volume = volume_data\r\n    scanner.lookup = lookup\r\n    scanner.voxel_size = voxel_size\r\n\r\n    # 5\uFE0F⃣ Golden-angle scan\r\n    golden_a = 180*(3 - np.sqrt(5)) / 2  # angolo aureo\r\n    num_proj = 10\r\n    theta_start = 30\r\n    golden_angles_tomo = np.mod(theta_start + np.arange(num_proj) * golden_a, 180)\r\n    print(\"10 golden angles:\", golden_angles_tomo[:10])\r\n\r\n    # Scansione golden-angle\r\n    out_file = os.path.join(base_path, \"golden_tomo_with_dose.h5\")\r\n    projections, dose_stats = scanner.tomography_scan(\r\n        golden_angles_tomo,\r\n        out_file,\r\n        calculate_dose=False\r\n    )\r\n    print(f\"Golden-angle scan salvato in: {out_file}\")\r\n\r\n    # Golden-angle ordinato\r\n    golden_angles_sorted = np.sort(golden_angles_tomo)\r\n    projections_sorted, dose_stats_sorted = scanner.tomography_scan(\r\n        golden_angles_sorted,\r\n        os.path.join(base_path, \"golden_angles_tomo_sorted.h5\"),\r\n        calculate_dose=False\r\n    )\r\n\r\n    # 6\uFE0F⃣ Salvataggio stack di proiezioni per visualizzazione remota\r\n    stack_file = os.path.join(base_path, \"stack_projections_sorted.npy\")\r\n    np.save(stack_file, projections_sorted)\r\n    print(f\"Stack di proiezioni salvato come: {stack_file}\")\r\n\r\n    print(\"Golden-angle scans complete\")\r\n\r\n#--------------------------------------------\r\nif __name__ == \"__main__\":\r\n    main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/examples/golden_brain_phantom.py b/examples/golden_brain_phantom.py
--- a/examples/golden_brain_phantom.py	(revision 50a9c06bf40b6d4021d94c65c551f2e9cd2c81d4)
+++ b/examples/golden_brain_phantom.py	(date 1760025453272)
@@ -14,7 +14,7 @@
 
 #--------------------------------------------
 def main():
-    base_path = "/data2/Noemi/MSim/examples"
+    base_path = "/mnt/c/Users/noemi/Desktop/Noe/examples"
     zarr_file = os.path.join(base_path, "brain_map.zarr")
     json_file = os.path.join(base_path, "brain_lookup.json")
     config_file = os.path.join(base_path, "enhanced_config.json")
@@ -52,8 +52,8 @@
 
     # 5️⃣ Golden-angle scan
     golden_a = 180*(3 - np.sqrt(5)) / 2  # angolo aureo
-    num_proj = 10
-    theta_start = 30
+    num_proj = 100
+    theta_start = 0
     golden_angles_tomo = np.mod(theta_start + np.arange(num_proj) * golden_a, 180)
     print("10 golden angles:", golden_angles_tomo[:10])
 
Index: examples/experiment_golden.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/usr/bin/env python3\r\n\"\"\"\r\nEnhanced X-ray simulation example with photon statistics and dose calculation.\r\n\"\"\"\r\n\r\nimport numpy as np\r\nimport json\r\nfrom msim.simulator import XRayScanner, quick_tomography, analyze_dose_only\r\n\r\ndef create_enhanced_config():\r\n    \"\"\"Create configuration with photon statistics and dose parameters.\"\"\"\r\n    config = {\r\n        \"ENERGY_KEV\": 23.0,\r\n        \"DETECTOR_DIST\": 0.3,\r\n        \"DETECTOR_PIXEL_SIZE\": 0.5e-6,  # 0.5 micron detector pixels\r\n        \"PAD\": 50,\r\n        \"ENABLE_PHASE\": True,\r\n        \"ENABLE_ABSORPTION\": True,\r\n        \"ENABLE_SCATTER\": True,\r\n        \r\n        # Photon statistics parameters\r\n        \"INCIDENT_PHOTONS\": 1e6,       # High quality scan\r\n        \"DETECTOR_EFFICIENCY\": 0.8,    # 80% quantum efficiency\r\n        \"DARK_CURRENT\": 10,            # 10 dark counts per pixel\r\n        \"READOUT_NOISE\": 5,            # 5 RMS readout noise\r\n        \"ENABLE_PHOTON_NOISE\": True    # Include shot noise\r\n    }\r\n    \r\n    with open(\"enhanced_config.json\", \"w\") as f:\r\n        json.dump(config, f, indent=2)\r\n    \r\n    print(\"Created enhanced_config.json with photon statistics\")\r\n    return config\r\n\r\ndef example_basic_scan():\r\n    \"\"\"Basic scan without dose calculation.\"\"\"\r\n    print(\"\\n=== BASIC SCAN EXAMPLE ===\")\r\n    \r\n    # Quick tomography (default settings)\r\n    projections, _ = quick_tomography(\r\n        \"phantom_bone.zarr\", \r\n        \"phantom_bone.json\", \r\n        n_projections=90,\r\n        output_file=\"basic_tomo.h5\"\r\n    )\r\n    \r\n    print(f\"Basic tomography completed: {projections.shape}\")\r\n\r\ndef example_dose_analysis():\r\n    \"\"\"Dose analysis without simulation.\"\"\"\r\n    print(\"\\n=== DOSE ANALYSIS EXAMPLE ===\")\r\n    \r\n    dose_map, dose_stats = analyze_dose_only(\r\n        \"phantom_bone.zarr\",\r\n        \"phantom_bone.json\", \r\n        \"enhanced_config.json\"\r\n    )\r\n    \r\n    print(f\"Dose map calculated: {dose_map.shape}\")\r\n    return dose_map, dose_stats\r\n\r\ndef example_full_scan_with_dose():\r\n    \"\"\"Complete scan with dose calculation.\"\"\"\r\n    print(\"\\n=== FULL SCAN WITH DOSE ===\")\r\n    \r\n    scanner = XRayScanner(\"enhanced_config.json\")\r\n    scanner.load_volume(\"phantom_bone.zarr\", \"phantom_bone.json\")\r\n\r\n    \r\n    # Tomography with dose\r\n    angles_tomo = np.linspace(0, 180, 360, endpoint=False)   #np.linspace(start, stop, num 360 ) ->da 0 a 180° in 360 step , endpoint mi evita il doppio 180\r\n    projections, dose_stats = scanner.tomography_scan(\r\n        angles_tomo, \r\n        \"tomo_with_dose.h5\",\r\n        calculate_dose=False\r\n    )\r\n    \r\n    \r\n    print(f\"Tomography with dose completed: {projections.shape}\")\r\n    return projections, dose_stats\r\n\r\ndef example_parameter_study():\r\n    \"\"\"Study effect of different photon counts on image quality and dose.\"\"\"\r\n    print(\"\\n=== PARAMETER STUDY ===\")\r\n    \r\n    photon_counts = [1e4, 1e5, 1e6, 1e7]  # Low to high photon flux\r\n    \r\n    for i, photon_count in enumerate(photon_counts):\r\n        print(f\"\\nTesting with {photon_count:.0e} photons...\")\r\n        \r\n        # Create config for this photon count\r\n        config = create_enhanced_config()\r\n        config[\"INCIDENT_PHOTONS\"] = photon_count\r\n        \r\n        config_file = f\"config_photons_{i}.json\"\r\n        with open(config_file, \"w\") as f:\r\n            json.dump(config, f, indent=2)\r\n        \r\n        # Run scan\r\n        scanner = XRayScanner(config_file)\r\n        scanner.load_volume(\"phantom_bone.zarr\", \"phantom_bone.json\")\r\n        \r\n        projections, dose_stats = scanner.tomography_scan(\r\n            np.linspace(0, 180, 36),  # Fewer angles for speed\r\n            f\"tomo_photons_{i}.h5\",\r\n            calculate_dose=True\r\n        )\r\n        \r\n        print(f\"  Projection noise level: {np.std(projections):.4f}\")\r\n\r\ndef example_compare_geometries():\r\n    \"\"\"Compare tomography vs laminography dose distributions.\"\"\"\r\n    print(\"\\n=== GEOMETRY COMPARISON ===\")\r\n    \r\n    scanner = XRayScanner(\"enhanced_config.json\")\r\n    scanner.load_volume(\"phantom_bone.zarr\", \"phantom_bone.json\")\r\n    \r\n    angles = np.linspace(0, 180, 90)  # Same angles for fair comparison \r\n    \r\n    # Tomography\r\n    print(\"Running tomography...\")\r\n    tomo_proj, tomo_dose = scanner.tomography_scan(\r\n        angles, \"compare_tomo.h5\", calculate_dose=True\r\n    )\r\n    \r\n    # Laminography at 45°\r\n    print(\"Running laminography...\")\r\n    lamino_proj, lamino_dose = scanner.laminography_scan(\r\n        angles, tilt_deg=45, output_file=\"compare_lamino.h5\", calculate_dose=True\r\n    )\r\n    \r\n    print(\"Geometry comparison completed\")\r\n    return tomo_dose, lamino_dose\r\n\t\r\n\t\r\n\r\ndef example_golden_scan(num_proj=360, theta_start=30):\r\n    \"\"\"Golden-angle tomography (angles modulo 180).\"\"\"\r\n    golden_a = 180 * (3 - np.sqrt(5)) / 2  \r\n\t#\tgolden_a_rad = np.deg2rad(golden_a)    # conversione in radianti\r\n    g_angles = np.mod(theta_start + np.arange(num_proj) * golden_a, 180)\r\n\r\n    scanner = XRayScanner(\"enhanced_config.json\")\r\n    scanner.load_volume(\"phantom_bone.zarr\", \"phantom_bone.json\")\r\n\r\n    projections, dose_stats = scanner.tomography_scan(\r\n        g_angles,\r\n        \"golden_tomo_with_dose.h5\",\r\n        calculate_dose=True\r\n    )\r\n    return projections, dose_stats\r\n\r\n\r\n\r\n\r\ndef example_material_specific_dose():\r\n    \"\"\"Analyze dose for specific materials.\"\"\"\r\n    print(\"\\n=== MATERIAL-SPECIFIC DOSE ===\")\r\n    \r\n    dose_map, dose_stats = analyze_dose_only(\r\n        \"phantom_bone.zarr\",\r\n        \"phantom_bone.json\",\r\n        \"enhanced_config.json\"\r\n    )\r\n    \r\n    # Find highest dose material\r\n    max_dose_material = max(dose_stats.items(), key=lambda x: x[1]['max_dose_gy'])\r\n    print(f\"\\nHighest dose material: {max_dose_material[1]['material_name']}\")\r\n    print(f\"Max dose: {max_dose_material[1]['max_dose_gy']:.2e} Gy\")\r\n    \r\n    # Find largest volume material\r\n    max_volume_material = max(dose_stats.items(), key=lambda x: x[1]['total_volume_um3'])\r\n    print(f\"\\nLargest volume material: {max_volume_material[1]['material_name']}\")\r\n    print(f\"Volume: {max_volume_material[1]['total_volume_um3']:.1f} μm³\")\r\n\r\ndef main():\r\n    \"\"\"Run all examples.\"\"\"\r\n    print(\"ENHANCED X-RAY SIMULATION EXAMPLES\")\r\n    print(\"=\" * 60)\r\n    print(\"Features: Photon statistics, dose calculation, material analysis\")\r\n    print(\"=\" * 60)\r\n    \r\n    try:\r\n        # Setup\r\n        create_enhanced_config()\r\n        \r\n        # Generate test phantom if needed\r\n        import os\r\n        if not os.path.exists(\"phantom_dose_test.zarr\"):\r\n            print(\"Generating bone phantom...\")\r\n            from msim.generate_phantom import generate_phantom\r\n            generate_phantom(\"bone\", shape=(64, 96, 96), voxel_size=(0.5, 0.5, 0.5))\r\n        \r\n        # Run examples\r\n        #example_basic_scan()\r\n        #example_dose_analysis()\r\n        example_full_scan_with_dose()\r\n        #example_parameter_study()\r\n        #example_compare_geometries()\r\n        #example_material_specific_dose()\r\n        \r\n        print(\"\\n\" + \"=\" * 60)\r\n        print(\"All examples completed successfully!\")\r\n        print(\"\\nOutput files created:\")\r\n        print(\"- basic_tomo.h5 (basic tomography)\")\r\n        print(\"- tomo_with_dose.h5 (tomography + dose)\")\r\n        print(\"- tomo_photons_*.h5 (parameter study)\")\r\n        print(\"- compare_*.h5 (geometry comparison)\")\r\n        print(\"- enhanced_config.json (configuration)\")\r\n        \r\n    except Exception as e:\r\n        print(f\"Error: {e}\")\r\n        import traceback\r\n        traceback.print_exc()\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/examples/experiment_golden.py b/examples/experiment_golden.py
--- a/examples/experiment_golden.py	(revision 50a9c06bf40b6d4021d94c65c551f2e9cd2c81d4)
+++ b/examples/experiment_golden.py	(date 1760024362453)
@@ -1,217 +1,215 @@
 #!/usr/bin/env python3
 """
-Enhanced X-ray simulation example with photon statistics and dose calculation.
+Brain micro-CT @ 50 keV (fix):
+- voxel 20 µm (override in cm)
+- 50 keV
+- Visualizza sia RAW counts che LOG
+- Limiti di contrasto globali per Napari e PNG
+- Diagnostica SNR
 """
 
-import numpy as np
-import json
-from msim.simulator import XRayScanner, quick_tomography, analyze_dose_only
+import os, json, zarr, numpy as np
+import matplotlib.pyplot as plt
+from msim.simulator import XRayScanner
+
+# ============================
+#        PARAMETRI TOP
+# ============================
+BASE_PATH = "/mnt/c/Users/noemi/Desktop/Noe/examples"
+ZARR_FILE = os.path.join(BASE_PATH, "brain_map.zarr")
+JSON_FILE = os.path.join(BASE_PATH, "brain_lookup.json")
+CONFIG_FILE = os.path.join(BASE_PATH, "enhanced_config.json")
+
+ANGLE_MODE = "golden"      # "golden" | "linspace"
+N_PROJ = 50
+CALCULATE_DOSE = False
+
+# --- voxel 20 µm -> 0.002 cm ---
+VOXEL_SIZE_OVERRIDE_CM = [0.002, 0.002, 0.002]
+
+# A 50 keV lasciamo i molli senza boost artificiale
+SOFT_TISSUE_SCALE = 1.0
 
-def create_enhanced_config():
-    """Create configuration with photon statistics and dose parameters."""
-    config = {
-        "ENERGY_KEV": 23.0,
-        "DETECTOR_DIST": 0.3,
-        "DETECTOR_PIXEL_SIZE": 0.5e-6,  # 0.5 micron detector pixels
+# Metti True solo se lo scanner vuole radianti
+ANGLES_IN_RADIANS = False
+
+# Preset fotoni: scegli "low_dose", "standard", "high_snr"
+PHOTON_MODE = "standard"
+PHOTON_PRESETS = {
+    "low_dose": 1e6,
+    "standard": 5e6,   # default
+    "high_snr": 2e7,
+}
+
+# ============================
+#   CONFIG ENHANCED PER BRAIN
+# ============================
+def create_enhanced_config_brain(path=CONFIG_FILE):
+    photons = PHOTON_PRESETS.get(PHOTON_MODE, PHOTON_PRESETS["standard"])
+    cfg = {
+        "ENERGY_KEV": 50.0,
+        "DETECTOR_DIST": 0.2,        # m
+        "DETECTOR_PIXEL_SIZE": 5e-6, # m, 5 µm
         "PAD": 50,
-        "ENABLE_PHASE": True,
+
+        # fisica: “aspetto CT” assorbitivo
+        "ENABLE_PHASE": False,
         "ENABLE_ABSORPTION": True,
         "ENABLE_SCATTER": True,
-        
-        # Photon statistics parameters
-        "INCIDENT_PHOTONS": 1e6,       # High quality scan
-        "DETECTOR_EFFICIENCY": 0.8,    # 80% quantum efficiency
-        "DARK_CURRENT": 10,            # 10 dark counts per pixel
-        "READOUT_NOISE": 5,            # 5 RMS readout noise
-        "ENABLE_PHOTON_NOISE": True    # Include shot noise
+
+        # statistiche fotoni / rumori
+        "INCIDENT_PHOTONS": photons,
+        "DETECTOR_EFFICIENCY": 0.8,
+        "DARK_CURRENT": 5,
+        "READOUT_NOISE": 3,
+        "ENABLE_PHOTON_NOISE": True
     }
-    
-    with open("enhanced_config.json", "w") as f:
-        json.dump(config, f, indent=2)
-    
-    print("Created enhanced_config.json with photon statistics")
-    return config
+    with open(path, "w") as f:
+        json.dump(cfg, f, indent=2)
+    print(f"[OK] Creato config: {path}  |  ENERGY_KEV=50.0  INCIDENT_PHOTONS={photons:.2e}")
+    return cfg
+
+# ============================
+#       UTIL / PIPELINE
+# ============================
+def load_volume_and_lookup(zarr_path, json_path):
+    if not os.path.exists(zarr_path): raise FileNotFoundError(zarr_path)
+    if not os.path.exists(json_path): raise FileNotFoundError(json_path)
+
+    z = zarr.open(zarr_path, mode='r')
+    volume_labels = z[:]
+    with open(json_path, "r") as f:
+        meta = json.load(f)
 
-def example_basic_scan():
-    """Basic scan without dose calculation."""
-    print("\n=== BASIC SCAN EXAMPLE ===")
-    
-    # Quick tomography (default settings)
-    projections, _ = quick_tomography(
-        "phantom_bone.zarr", 
-        "phantom_bone.json", 
-        n_projections=90,
-        output_file="basic_tomo.h5"
-    )
-    
-    print(f"Basic tomography completed: {projections.shape}")
+    lookup = meta["lookup"]
+
+    # MU map (cm^-1), con eventuale scaling dei molli (qui 1.0 a 50 keV)
+    volume_mu = np.zeros_like(volume_labels, dtype=np.float32)
+    for label_str, props in lookup.items():
+        label = int(label_str)
+        mu = float(props["mu"])  # atteso cm^-1 dal tuo JSON
+        if 0.15 <= mu <= 0.30 and SOFT_TISSUE_SCALE != 1.0:
+            mu *= SOFT_TISSUE_SCALE
+        volume_mu[volume_labels == label] = mu
+
+    voxel_size_cm = VOXEL_SIZE_OVERRIDE_CM
 
-def example_dose_analysis():
-    """Dose analysis without simulation."""
-    print("\n=== DOSE ANALYSIS EXAMPLE ===")
-    
-    dose_map, dose_stats = analyze_dose_only(
-        "phantom_bone.zarr",
-        "phantom_bone.json", 
-        "enhanced_config.json"
-    )
-    
-    print(f"Dose map calculated: {dose_map.shape}")
-    return dose_map, dose_stats
+    print(f"[INFO] Volume shape: {volume_mu.shape}")
+    print(f"[INFO] mu min/max (cm^-1): {float(volume_mu.min())} / {float(volume_mu.max())}")
+    print(f"[INFO] voxel_size (cm): {voxel_size_cm}")
+    return volume_mu, lookup, voxel_size_cm
+
+def make_angles(n_proj, mode="golden"):
+    if mode == "golden":
+        golden_a = 180*(3 - np.sqrt(5)) / 2.0
+        ang = np.mod(np.arange(n_proj) * golden_a, 180.0)
+        ang = np.sort(ang)
+    else:
+        ang = np.linspace(0.0, 180.0, n_proj, endpoint=False)
+    if ANGLES_IN_RADIANS:
+        ang = np.deg2rad(ang)
+    print(f"[INFO] Angoli ({'rad' if ANGLES_IN_RADIANS else 'deg'}): "
+          f"{np.array2string(ang[:10], precision=2, separator=', ')} ...")
+    return ang
+
+def to_log_domain(projections, I0=None, eps=1e-12):
+    """Converte I -> -log(I/I0) con stima robusta di I0 se non fornito."""
+    I = projections.astype(np.float32)
+    if I0 is None:
+        I0 = float(np.percentile(I, 99.9))  # più robusto di max contro outlier
+    I = np.clip(I, eps, None)
+    return -np.log(I / (I0 + eps)).astype(np.float32), I0
 
-def example_full_scan_with_dose():
-    """Complete scan with dose calculation."""
-    print("\n=== FULL SCAN WITH DOSE ===")
-    
-    scanner = XRayScanner("enhanced_config.json")
-    scanner.load_volume("phantom_bone.zarr", "phantom_bone.json")
-
-    
-    # Tomography with dose
-    angles_tomo = np.linspace(0, 180, 360, endpoint=False)   #np.linspace(start, stop, num 360 ) ->da 0 a 180° in 360 step , endpoint mi evita il doppio 180
-    projections, dose_stats = scanner.tomography_scan(
-        angles_tomo, 
-        "tomo_with_dose.h5",
-        calculate_dose=False
-    )
-    
-    
-    print(f"Tomography with dose completed: {projections.shape}")
-    return projections, dose_stats
-
-def example_parameter_study():
-    """Study effect of different photon counts on image quality and dose."""
-    print("\n=== PARAMETER STUDY ===")
-    
-    photon_counts = [1e4, 1e5, 1e6, 1e7]  # Low to high photon flux
-    
-    for i, photon_count in enumerate(photon_counts):
-        print(f"\nTesting with {photon_count:.0e} photons...")
-        
-        # Create config for this photon count
-        config = create_enhanced_config()
-        config["INCIDENT_PHOTONS"] = photon_count
-        
-        config_file = f"config_photons_{i}.json"
-        with open(config_file, "w") as f:
-            json.dump(config, f, indent=2)
-        
-        # Run scan
-        scanner = XRayScanner(config_file)
-        scanner.load_volume("phantom_bone.zarr", "phantom_bone.json")
-        
-        projections, dose_stats = scanner.tomography_scan(
-            np.linspace(0, 180, 36),  # Fewer angles for speed
-            f"tomo_photons_{i}.h5",
-            calculate_dose=True
-        )
-        
-        print(f"  Projection noise level: {np.std(projections):.4f}")
-
-def example_compare_geometries():
-    """Compare tomography vs laminography dose distributions."""
-    print("\n=== GEOMETRY COMPARISON ===")
-    
-    scanner = XRayScanner("enhanced_config.json")
-    scanner.load_volume("phantom_bone.zarr", "phantom_bone.json")
-    
-    angles = np.linspace(0, 180, 90)  # Same angles for fair comparison 
-    
-    # Tomography
-    print("Running tomography...")
-    tomo_proj, tomo_dose = scanner.tomography_scan(
-        angles, "compare_tomo.h5", calculate_dose=True
-    )
-    
-    # Laminography at 45°
-    print("Running laminography...")
-    lamino_proj, lamino_dose = scanner.laminography_scan(
-        angles, tilt_deg=45, output_file="compare_lamino.h5", calculate_dose=True
-    )
-    
-    print("Geometry comparison completed")
-    return tomo_dose, lamino_dose
-	
-	
-
-def example_golden_scan(num_proj=360, theta_start=30):
-    """Golden-angle tomography (angles modulo 180)."""
-    golden_a = 180 * (3 - np.sqrt(5)) / 2  
-	#	golden_a_rad = np.deg2rad(golden_a)    # conversione in radianti
-    g_angles = np.mod(theta_start + np.arange(num_proj) * golden_a, 180)
-
-    scanner = XRayScanner("enhanced_config.json")
-    scanner.load_volume("phantom_bone.zarr", "phantom_bone.json")
-
-    projections, dose_stats = scanner.tomography_scan(
-        g_angles,
-        "golden_tomo_with_dose.h5",
-        calculate_dose=True
-    )
-    return projections, dose_stats
-
-
-
-
-def example_material_specific_dose():
-    """Analyze dose for specific materials."""
-    print("\n=== MATERIAL-SPECIFIC DOSE ===")
-    
-    dose_map, dose_stats = analyze_dose_only(
-        "phantom_bone.zarr",
-        "phantom_bone.json",
-        "enhanced_config.json"
-    )
-    
-    # Find highest dose material
-    max_dose_material = max(dose_stats.items(), key=lambda x: x[1]['max_dose_gy'])
-    print(f"\nHighest dose material: {max_dose_material[1]['material_name']}")
-    print(f"Max dose: {max_dose_material[1]['max_dose_gy']:.2e} Gy")
-    
-    # Find largest volume material
-    max_volume_material = max(dose_stats.items(), key=lambda x: x[1]['total_volume_um3'])
-    print(f"\nLargest volume material: {max_volume_material[1]['material_name']}")
-    print(f"Volume: {max_volume_material[1]['total_volume_um3']:.1f} μm³")
-
+def save_png_stack(stack, out_dir, prefix="proj_", percentiles=(1, 99)):
+    os.makedirs(out_dir, exist_ok=True)
+    vmin, vmax = np.percentile(stack, percentiles[0]), np.percentile(stack, percentiles[1])
+    for i, img in enumerate(stack):
+        plt.imsave(os.path.join(out_dir, f"{prefix}{i:03d}.png"),
+                   img, cmap='gray', vmin=vmin, vmax=vmax)
+    print(f"[OK] PNG salvate in: {out_dir} (vmin={vmin:.4g}, vmax={vmax:.4g})")
+    return float(vmin), float(vmax)
+
+# ============================
+#            MAIN
+# ============================
 def main():
-    """Run all examples."""
-    print("ENHANCED X-RAY SIMULATION EXAMPLES")
-    print("=" * 60)
-    print("Features: Photon statistics, dose calculation, material analysis")
-    print("=" * 60)
-    
+    create_enhanced_config_brain(CONFIG_FILE)
+
+    volume_mu, lookup, voxel_size_cm = load_volume_and_lookup(ZARR_FILE, JSON_FILE)
+
+    scanner = XRayScanner(CONFIG_FILE)
+    scanner.volume = volume_mu
+    scanner.lookup = lookup
+    scanner.voxel_size = voxel_size_cm
+
+    angles = make_angles(N_PROJ, ANGLE_MODE)
+
+    out_h5 = os.path.join(BASE_PATH, "brain_tomo_50keV.h5")
+    projections, dose_stats = scanner.tomography_scan(
+        angles, out_h5, calculate_dose=CALCULATE_DOSE
+    )
+    print(f"[OK] Tomography completata: {projections.shape}")
+
+    # ============================
+    # Diagnostica SNR RAW
+    # ============================
+    I = projections.astype(np.float32).reshape(projections.shape[0], -1)
+    print("[SNR] RAW (prime 5 proiezioni):")
+    for k in range(min(5, len(I))):
+        mean, std = I[k].mean(), I[k].std()
+        snr = mean/(std+1e-12)
+        print(f"  proj {k:03d}: mean={mean:.4g}  std={std:.4g}  SNR≈{snr:.2f}")
+
+    # ============================
+    # Salva stack RAW .npy
+    # ============================
+    npy_path = os.path.join(BASE_PATH, "brain_projections_50keV_RAW.npy")
+    np.save(npy_path, projections)
+    print(f"[OK] Stack RAW salvato: {npy_path}")
+
+    # ============================
+    # LOG domain + PNG
+    # ============================
+    proj_log, I0_est = to_log_domain(projections)
+    print(f"[INFO] I0 stimato (p99.9) = {I0_est:.4g}")
+
+    png_dir_log = os.path.join(BASE_PATH, "brain_png_LOG_50keV")
+    vmin_log, vmax_log = save_png_stack(proj_log, png_dir_log, prefix="proj_")
+
+    # ============================
+    # (Opzionale) PNG RAW per confronto
+    # ============================
+    png_dir_raw = os.path.join(BASE_PATH, "brain_png_RAW_50keV")
+    _ = save_png_stack(projections.astype(np.float32), png_dir_raw, prefix="proj_")
+
+    # ============================
+    # Napari: RAW + LOG con limiti globali
+    # ============================
     try:
-        # Setup
-        create_enhanced_config()
-        
-        # Generate test phantom if needed
-        import os
-        if not os.path.exists("phantom_dose_test.zarr"):
-            print("Generating bone phantom...")
-            from msim.generate_phantom import generate_phantom
-            generate_phantom("bone", shape=(64, 96, 96), voxel_size=(0.5, 0.5, 0.5))
-        
-        # Run examples
-        #example_basic_scan()
-        #example_dose_analysis()
-        example_full_scan_with_dose()
-        #example_parameter_study()
-        #example_compare_geometries()
-        #example_material_specific_dose()
-        
-        print("\n" + "=" * 60)
-        print("All examples completed successfully!")
-        print("\nOutput files created:")
-        print("- basic_tomo.h5 (basic tomography)")
-        print("- tomo_with_dose.h5 (tomography + dose)")
-        print("- tomo_photons_*.h5 (parameter study)")
-        print("- compare_*.h5 (geometry comparison)")
-        print("- enhanced_config.json (configuration)")
-        
+        import napari
+        viewer = napari.Viewer()
+
+        # Limiti di contrasto globali per stabilizzare la visualizzazione
+        vmin_raw, vmax_raw = np.percentile(projections, 1), np.percentile(projections, 99)
+
+        viewer.add_image(
+            projections.astype(np.float32),
+            name='Brain projections (RAW counts)',
+            contrast_limits=(float(vmin_raw), float(vmax_raw)),
+            colormap='gray',
+            interpolation='nearest'
+        )
+        viewer.add_image(
+            proj_log,
+            name='Brain projections (LOG)',
+            contrast_limits=(float(vmin_log), float(vmax_log)),
+            colormap='gray',
+            interpolation='nearest'
+        )
+        napari.run()
     except Exception as e:
-        print(f"Error: {e}")
-        import traceback
-        traceback.print_exc()
+        print("[WARN] Napari non disponibile:", e)
 
 if __name__ == "__main__":
     main()
+
Index: examples/inspect_tomo_h5.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/examples/inspect_tomo_h5.py b/examples/inspect_tomo_h5.py
new file mode 100644
--- /dev/null	(date 1759551253661)
+++ b/examples/inspect_tomo_h5.py	(date 1759551253661)
@@ -0,0 +1,150 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+"""
+inspect_tomo_h5.py
+Ispeziona un file HDF5 di tomografia:
+- elenca dataset e attributi
+- carica stack proiezioni (prova nomi comuni)
+- stampa shape, dtype, range e SNR
+- se i dati sembrano RAW -> calcola LOG robusto
+- mostra qualche frame con matplotlib
+- (opzionale) apre Napari con limiti di contrasto globali
+"""
+
+import os, sys, numpy as np
+import h5py
+import matplotlib.pyplot as plt
+
+H5_PATH = sys.argv[1] if len(sys.argv) > 1 else "brain_tomo_50keV.h5"
+SHOW_NAPARI = True  # metti False se non vuoi Napari
+SAVE_PNG = True
+PNG_DIR = "inspect_png"
+
+def find_stack(h):
+    """
+    Cerca un dataset 3D plausibile (N, H, W).
+    Prova nomi comuni: 'projections', 'proj', 'data', 'images'
+    """
+    candidati = ["projections", "proj", "data", "images", "stack"]
+    for name in candidati:
+        if name in h and isinstance(h[name], h5py.Dataset) and h[name].ndim == 3:
+            return h[name][...], name, dict(h[name].attrs)
+    # fallback: cerca il primo dataset 3D
+    found = []
+    h.visititems(lambda name, obj: found.append((name, obj)) if isinstance(obj, h5py.Dataset) and obj.ndim == 3 else None)
+    if found:
+        name, ds = found[0]
+        return ds[...], name, dict(ds.attrs)
+    raise RuntimeError("Nessun dataset 3D trovato nel file.")
+
+def list_contents(h):
+    print("== H5 CONTENUTO ==")
+    def _printer(name, obj):
+        if isinstance(obj, h5py.Dataset):
+            print(f"[DS] {name:30s} shape={obj.shape} dtype={obj.dtype}")
+            if obj.attrs:
+                keys = list(obj.attrs.keys())[:8]
+                print("     attrs:", {k: obj.attrs[k] for k in keys})
+        elif isinstance(obj, h5py.Group) and name != "/":
+            print(f"[GR] {name}")
+    h.visititems(_printer)
+    if h.attrs:
+        keys = list(h.attrs.keys())
+        print("== H5 ATTRIBUTI FILE ==")
+        for k in keys:
+            try:
+                print(f"  {k}: {h.attrs[k]}")
+            except Exception:
+                pass
+
+def snr_report(arr, n=5):
+    flat = arr.reshape(arr.shape[0], -1)
+    print("== SNR prime {} proiezioni ==".format(min(n, arr.shape[0])))
+    for k in range(min(n, arr.shape[0])):
+        mean, std = flat[k].mean(), flat[k].std()
+        snr = mean / (std + 1e-12)
+        print(f"  proj {k:03d}: mean={mean:.6g}  std={std:.6g}  SNR≈{snr:.2f}")
+
+def robust_log(I, I0=None, eps=1e-12):
+    I = I.astype(np.float32)
+    if I0 is None:
+        I0 = float(np.percentile(I, 99.9))
+    I = np.clip(I, eps, None)
+    return -np.log(I/(I0+eps)).astype(np.float32), I0
+
+def quick_show(title, img, vmin=None, vmax=None):
+    plt.figure()
+    plt.title(title)
+    if vmin is None or vmax is None:
+        vmin, vmax = np.percentile(img, 1), np.percentile(img, 99)
+    plt.imshow(img, cmap='gray', vmin=vmin, vmax=vmax)
+    plt.axis('off')
+
+def main():
+    if not os.path.exists(H5_PATH):
+        print("File non trovato:", H5_PATH)
+        sys.exit(1)
+
+    with h5py.File(H5_PATH, "r") as h:
+        list_contents(h)
+        stack, name, attrs = find_stack(h)
+        print(f"\n== STACK TROVATO: '{name}' shape={stack.shape} dtype={stack.dtype}")
+        print("   attrs:", attrs)
+
+    N, H, W = stack.shape
+    print(f"\n== BASICS ==\nshape={stack.shape}  dtype={stack.dtype}")
+    print(f"min/max={stack.min():.6g}/{stack.max():.6g}")
+    snr_report(stack, n=5)
+
+    # Heuristica: dati RAW se gamma molto stretta intorno a un I0 grande
+    p1, p99 = np.percentile(stack, 1), np.percentile(stack, 99)
+    dynamic = (p99 - p1) / (p99 + 1e-12)
+    looks_like_raw = (stack.max() > 1e3) and (dynamic < 0.01)
+    print(f"\nHeuristica RAW? {looks_like_raw}  (p1={p1:.6g}, p99={p99:.6g}, dynamic~{dynamic:.4%})")
+
+    # Calcola LOG se sembra RAW
+    if looks_like_raw:
+        proj_log, I0 = robust_log(stack)
+        print(f"[LOG] I0 stimato (p99.9) = {I0:.6g}")
+        print(f"[LOG] range: {proj_log.min():.6g}/{proj_log.max():.6g}")
+    else:
+        proj_log = stack.copy()
+        print("[LOG] Il dataset sembra già log o con range ampio; non ricalcolo il log.")
+
+    # Plot rapidi (matplotlib)
+    idxs = [0, N//2, N-1]
+    for idx in idxs:
+        quick_show(f"RAW frame {idx}", stack[idx])
+        quick_show(f"LOG frame {idx}", proj_log[idx])
+    plt.show(block=False)
+
+    # Salva PNG sample e interi stack (opzionale)
+    if SAVE_PNG:
+        os.makedirs(PNG_DIR, exist_ok=True)
+        vmin_raw, vmax_raw = np.percentile(stack, (1, 99))
+        vmin_log, vmax_log = np.percentile(proj_log, (1, 99))
+        import imageio.v3 as iio
+        for idx in idxs:
+            iio.imwrite(os.path.join(PNG_DIR, f"raw_{idx:03d}.png"),
+                        ((np.clip(stack[idx], vmin_raw, vmax_raw)-vmin_raw)/(vmax_raw-vmin_raw+1e-12)*255).astype(np.uint8))
+            iio.imwrite(os.path.join(PNG_DIR, f"log_{idx:03d}.png"),
+                        ((np.clip(proj_log[idx], vmin_log, vmax_log)-vmin_log)/(vmax_log-vmin_log+1e-12)*255).astype(np.uint8))
+        print(f"[OK] PNG di esempio salvate in: {PNG_DIR}")
+
+    # Napari (se presente), con limiti globali
+    if SHOW_NAPARI:
+        try:
+            import napari
+            vmin_raw, vmax_raw = float(np.percentile(stack, 1)), float(np.percentile(stack, 99))
+            vmin_log, vmax_log = float(np.percentile(proj_log, 1)), float(np.percentile(proj_log, 99))
+            viewer = napari.Viewer()
+            layer_raw = viewer.add_image(stack.astype(np.float32), name="RAW")
+            layer_log = viewer.add_image(proj_log.astype(np.float32), name="LOG")
+            layer_raw.contrast_limits = (vmin_raw, vmax_raw)
+            layer_log.contrast_limits = (vmin_log, vmax_log)
+            napari.run()
+        except Exception as e:
+            print("[WARN] Napari non disponibile o errore GUI:", e)
+
+if __name__ == "__main__":
+    main()
Index: examples/vedi_ph.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/examples/vedi_ph.py b/examples/vedi_ph.py
new file mode 100644
--- /dev/null	(date 1759590480618)
+++ b/examples/vedi_ph.py	(date 1759590480618)
@@ -0,0 +1,68 @@
+import zarr
+import json
+import numpy as np
+import napari
+import os
+
+# ----------------------------
+# Percorsi dei file
+# ----------------------------
+zarr_path = "/mnt/c/Users/noemi/Desktop/Noe/examples/brain_map.zarr"
+json_path = "/mnt/c/Users/noemi/Desktop/Noe/examples/brain_lookup.json"
+
+# ----------------------------
+# Controllo che i file esistano
+# ----------------------------
+if not os.path.exists(zarr_path):
+    raise FileNotFoundError(f"Il file Zarr non esiste: {zarr_path}")
+if not os.path.exists(json_path):
+    raise FileNotFoundError(f"Il file JSON non esiste: {json_path}")
+
+# ----------------------------
+# Carica il volume Zarr
+# ----------------------------
+z = zarr.open(zarr_path, mode='r')
+data = z[:]
+print("Shape del volume:", data.shape)
+
+# ----------------------------
+# Carica JSON integrato
+# ----------------------------
+with open(json_path) as f:
+    phantom = json.load(f)
+
+# Verifica che esista la chiave "regions"
+if 'regions' not in phantom:
+    raise ValueError("Il JSON non contiene la chiave 'regions'.")
+
+phantom_regions = phantom['regions']
+
+# ----------------------------
+# Crea mappa ID -> GroupID
+# ----------------------------
+id_to_group = {r['ID']: r.get('GroupID', r['ID']) for r in phantom_regions}
+
+# ----------------------------
+# Ricostruisci il volume con GroupID
+# ----------------------------
+volume = np.vectorize(lambda x: id_to_group.get(x, 0))(data)
+
+# ----------------------------
+# Visualizza con napari
+# ----------------------------
+viewer = napari.Viewer()
+viewer.add_image(volume, name='Phantom', colormap='tab20', blending='additive')
+
+# ----------------------------
+# Facoltativo: aggiungi legenda dei nomi
+# ----------------------------
+group_names = {}
+for r in phantom_regions:
+    group_id = r.get('GroupID', r['ID'])
+    group_names[group_id] = phantom['lookup'].get(str(group_id), {}).get('name', f'Group {group_id}')
+
+print("Legenda dei gruppi:")
+for gid, name in group_names.items():
+    print(f"Group {gid}: {name}")
+
+napari.run()
Index: examples/experiment.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/usr/bin/env python3\r\n\"\"\"\r\nEnhanced X-ray simulation example with photon statistics and dose calculation.\r\n\"\"\"\r\n\r\nimport numpy as np\r\nimport json\r\nfrom msim.simulator import XRayScanner, quick_tomography, analyze_dose_only\r\n\r\ndef create_enhanced_config():\r\n    \"\"\"Create configuration with photon statistics and dose parameters.\"\"\"\r\n    config = {\r\n        \"ENERGY_KEV\": 23.0,\r\n        \"DETECTOR_DIST\": 0.3,\r\n        \"DETECTOR_PIXEL_SIZE\": 0.5e-6,  # 0.5 micron detector pixels\r\n        \"PAD\": 50,\r\n        \"ENABLE_PHASE\": True,\r\n        \"ENABLE_ABSORPTION\": True,\r\n        \"ENABLE_SCATTER\": True,\r\n        \r\n        # Photon statistics parameters\r\n        \"INCIDENT_PHOTONS\": 1e6,       # High quality scan\r\n        \"DETECTOR_EFFICIENCY\": 0.8,    # 80% quantum efficiency\r\n        \"DARK_CURRENT\": 10,            # 10 dark counts per pixel\r\n        \"READOUT_NOISE\": 5,            # 5 RMS readout noise\r\n        \"ENABLE_PHOTON_NOISE\": True    # Include shot noise\r\n    }\r\n    \r\n    with open(\"enhanced_config.json\", \"w\") as f:\r\n        json.dump(config, f, indent=2)\r\n    \r\n    print(\"Created enhanced_config.json with photon statistics\")\r\n    return config\r\n\r\ndef example_basic_scan():\r\n    \"\"\"Basic scan without dose calculation.\"\"\"\r\n    print(\"\\n=== BASIC SCAN EXAMPLE ===\")\r\n    \r\n    # Quick tomography (default settings)\r\n    projections, _ = quick_tomography(\r\n        \"phantom_bone.zarr\", \r\n        \"phantom_bone.json\", \r\n        n_projections=90,\r\n        output_file=\"basic_tomo.h5\"\r\n    )\r\n    \r\n    print(f\"Basic tomography completed: {projections.shape}\")\r\n\r\ndef example_dose_analysis():\r\n    \"\"\"Dose analysis without simulation.\"\"\"\r\n    print(\"\\n=== DOSE ANALYSIS EXAMPLE ===\")\r\n    \r\n    dose_map, dose_stats = analyze_dose_only(\r\n        \"phantom_bone.zarr\",\r\n        \"phantom_bone.json\", \r\n        \"enhanced_config.json\"\r\n    )\r\n    \r\n    print(f\"Dose map calculated: {dose_map.shape}\")\r\n    return dose_map, dose_stats\r\n\r\ndef example_full_scan_with_dose():\r\n    \"\"\"Complete scan with dose calculation.\"\"\"\r\n    print(\"\\n=== FULL SCAN WITH DOSE ===\")\r\n    \r\n    scanner = XRayScanner(\"enhanced_config.json\")\r\n    scanner.load_volume(\"phantom_bone.zarr\", \"phantom_bone.json\")\r\n\r\n    \r\n    # Tomography with dose\r\n    angles_tomo = np.linspace(0, 180, 360)   #np.linspace(start, stop, num 360 ) ->da 0 a 180° in 360 step\r\n    projections, dose_stats = scanner.tomography_scan(\r\n        angles_tomo, \r\n        \"tomo_with_dose.h5\",\r\n        calculate_dose=False\r\n    )\r\n    \r\n    \r\n    print(f\"Tomography with dose completed: {projections.shape}\")\r\n    return projections, dose_stats\r\n\r\ndef example_parameter_study():\r\n    \"\"\"Study effect of different photon counts on image quality and dose.\"\"\"\r\n    print(\"\\n=== PARAMETER STUDY ===\")\r\n    \r\n    photon_counts = [1e4, 1e5, 1e6, 1e7]  # Low to high photon flux\r\n    \r\n    for i, photon_count in enumerate(photon_counts):\r\n        print(f\"\\nTesting with {photon_count:.0e} photons...\")\r\n        \r\n        # Create config for this photon count\r\n        config = create_enhanced_config()\r\n        config[\"INCIDENT_PHOTONS\"] = photon_count\r\n        \r\n        config_file = f\"config_photons_{i}.json\"\r\n        with open(config_file, \"w\") as f:\r\n            json.dump(config, f, indent=2)\r\n        \r\n        # Run scan\r\n        scanner = XRayScanner(config_file)\r\n        scanner.load_volume(\"phantom_bone.zarr\", \"phantom_bone.json\")\r\n        \r\n        projections, dose_stats = scanner.tomography_scan(\r\n            np.linspace(0, 180, 36),  # Fewer angles for speed\r\n            f\"tomo_photons_{i}.h5\",\r\n            calculate_dose=True\r\n        )\r\n        \r\n        print(f\"  Projection noise level: {np.std(projections):.4f}\")\r\n\r\ndef example_compare_geometries():\r\n    \"\"\"Compare tomography vs laminography dose distributions.\"\"\"\r\n    print(\"\\n=== GEOMETRY COMPARISON ===\")\r\n    \r\n    scanner = XRayScanner(\"enhanced_config.json\")\r\n    scanner.load_volume(\"phantom_bone.zarr\", \"phantom_bone.json\")\r\n    \r\n    angles = np.linspace(0, 180, 90)  # Same angles for fair comparison \r\n    \r\n    # Tomography\r\n    print(\"Running tomography...\")\r\n    tomo_proj, tomo_dose = scanner.tomography_scan(\r\n        angles, \"compare_tomo.h5\", calculate_dose=True\r\n    )\r\n    \r\n    # Laminography at 45°\r\n    print(\"Running laminography...\")\r\n    lamino_proj, lamino_dose = scanner.laminography_scan(\r\n        angles, tilt_deg=45, output_file=\"compare_lamino.h5\", calculate_dose=True\r\n    )\r\n    \r\n    print(\"Geometry comparison completed\")\r\n    return tomo_dose, lamino_dose\r\n\r\ndef example_material_specific_dose():\r\n    \"\"\"Analyze dose for specific materials.\"\"\"\r\n    print(\"\\n=== MATERIAL-SPECIFIC DOSE ===\")\r\n    \r\n    dose_map, dose_stats = analyze_dose_only(\r\n        \"phantom_bone.zarr\",\r\n        \"phantom_bone.json\",\r\n        \"enhanced_config.json\"\r\n    )\r\n    \r\n    # Find highest dose material\r\n    max_dose_material = max(dose_stats.items(), key=lambda x: x[1]['max_dose_gy'])\r\n    print(f\"\\nHighest dose material: {max_dose_material[1]['material_name']}\")\r\n    print(f\"Max dose: {max_dose_material[1]['max_dose_gy']:.2e} Gy\")\r\n    \r\n    # Find largest volume material\r\n    max_volume_material = max(dose_stats.items(), key=lambda x: x[1]['total_volume_um3'])\r\n    print(f\"\\nLargest volume material: {max_volume_material[1]['material_name']}\")\r\n    print(f\"Volume: {max_volume_material[1]['total_volume_um3']:.1f} μm³\")\r\n\r\ndef main():\r\n    \"\"\"Run all examples.\"\"\"\r\n    print(\"ENHANCED X-RAY SIMULATION EXAMPLES\")\r\n    print(\"=\" * 60)\r\n    print(\"Features: Photon statistics, dose calculation, material analysis\")\r\n    print(\"=\" * 60)\r\n    \r\n    try:\r\n        # Setup\r\n        create_enhanced_config()\r\n        \r\n        # Generate test phantom if needed\r\n        import os\r\n        if not os.path.exists(\"phantom_dose_test.zarr\"):\r\n            print(\"Generating bone phantom...\")\r\n            from msim.generate_phantom import generate_phantom\r\n            generate_phantom(\"bone\", shape=(64, 96, 96), voxel_size=(0.5, 0.5, 0.5))\r\n        \r\n        # Run examples\r\n        #example_basic_scan()\r\n        #example_dose_analysis()\r\n        example_full_scan_with_dose()\r\n        #example_parameter_study()\r\n        #example_compare_geometries()\r\n        #example_material_specific_dose()\r\n        \r\n        print(\"\\n\" + \"=\" * 60)\r\n        print(\"All examples completed successfully!\")\r\n        print(\"\\nOutput files created:\")\r\n        print(\"- basic_tomo.h5 (basic tomography)\")\r\n        print(\"- tomo_with_dose.h5 (tomography + dose)\")\r\n        print(\"- tomo_photons_*.h5 (parameter study)\")\r\n        print(\"- compare_*.h5 (geometry comparison)\")\r\n        print(\"- enhanced_config.json (configuration)\")\r\n        \r\n    except Exception as e:\r\n        print(f\"Error: {e}\")\r\n        import traceback\r\n        traceback.print_exc()\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/examples/experiment.py b/examples/experiment.py
--- a/examples/experiment.py	(revision 50a9c06bf40b6d4021d94c65c551f2e9cd2c81d4)
+++ b/examples/experiment.py	(date 1759592741882)
@@ -1,196 +1,56 @@
 #!/usr/bin/env python3
 """
-Enhanced X-ray simulation example with photon statistics and dose calculation.
+Visualizzazione semplice del volume Zarr.
+Legge brain_map.zarr e mostra tutte le slice in Napari.
 """
 
 import numpy as np
 import json
-from msim.simulator import XRayScanner, quick_tomography, analyze_dose_only
+import os
+import zarr
+import napari
 
-def create_enhanced_config():
-    """Create configuration with photon statistics and dose parameters."""
-    config = {
-        "ENERGY_KEV": 23.0,
-        "DETECTOR_DIST": 0.3,
-        "DETECTOR_PIXEL_SIZE": 0.5e-6,  # 0.5 micron detector pixels
-        "PAD": 50,
-        "ENABLE_PHASE": True,
-        "ENABLE_ABSORPTION": True,
-        "ENABLE_SCATTER": True,
-        
-        # Photon statistics parameters
-        "INCIDENT_PHOTONS": 1e6,       # High quality scan
-        "DETECTOR_EFFICIENCY": 0.8,    # 80% quantum efficiency
-        "DARK_CURRENT": 10,            # 10 dark counts per pixel
-        "READOUT_NOISE": 5,            # 5 RMS readout noise
-        "ENABLE_PHOTON_NOISE": True    # Include shot noise
-    }
-    
-    with open("enhanced_config.json", "w") as f:
-        json.dump(config, f, indent=2)
-    
-    print("Created enhanced_config.json with photon statistics")
-    return config
-
-def example_basic_scan():
-    """Basic scan without dose calculation."""
-    print("\n=== BASIC SCAN EXAMPLE ===")
-    
-    # Quick tomography (default settings)
-    projections, _ = quick_tomography(
-        "phantom_bone.zarr", 
-        "phantom_bone.json", 
-        n_projections=90,
-        output_file="basic_tomo.h5"
-    )
-    
-    print(f"Basic tomography completed: {projections.shape}")
-
-def example_dose_analysis():
-    """Dose analysis without simulation."""
-    print("\n=== DOSE ANALYSIS EXAMPLE ===")
-    
-    dose_map, dose_stats = analyze_dose_only(
-        "phantom_bone.zarr",
-        "phantom_bone.json", 
-        "enhanced_config.json"
-    )
-    
-    print(f"Dose map calculated: {dose_map.shape}")
-    return dose_map, dose_stats
-
-def example_full_scan_with_dose():
-    """Complete scan with dose calculation."""
-    print("\n=== FULL SCAN WITH DOSE ===")
-    
-    scanner = XRayScanner("enhanced_config.json")
-    scanner.load_volume("phantom_bone.zarr", "phantom_bone.json")
-
-    
-    # Tomography with dose
-    angles_tomo = np.linspace(0, 180, 360)   #np.linspace(start, stop, num 360 ) ->da 0 a 180° in 360 step
-    projections, dose_stats = scanner.tomography_scan(
-        angles_tomo, 
-        "tomo_with_dose.h5",
-        calculate_dose=False
-    )
-    
-    
-    print(f"Tomography with dose completed: {projections.shape}")
-    return projections, dose_stats
-
-def example_parameter_study():
-    """Study effect of different photon counts on image quality and dose."""
-    print("\n=== PARAMETER STUDY ===")
-    
-    photon_counts = [1e4, 1e5, 1e6, 1e7]  # Low to high photon flux
-    
-    for i, photon_count in enumerate(photon_counts):
-        print(f"\nTesting with {photon_count:.0e} photons...")
-        
-        # Create config for this photon count
-        config = create_enhanced_config()
-        config["INCIDENT_PHOTONS"] = photon_count
-        
-        config_file = f"config_photons_{i}.json"
-        with open(config_file, "w") as f:
-            json.dump(config, f, indent=2)
-        
-        # Run scan
-        scanner = XRayScanner(config_file)
-        scanner.load_volume("phantom_bone.zarr", "phantom_bone.json")
-        
-        projections, dose_stats = scanner.tomography_scan(
-            np.linspace(0, 180, 36),  # Fewer angles for speed
-            f"tomo_photons_{i}.h5",
-            calculate_dose=True
-        )
-        
-        print(f"  Projection noise level: {np.std(projections):.4f}")
-
-def example_compare_geometries():
-    """Compare tomography vs laminography dose distributions."""
-    print("\n=== GEOMETRY COMPARISON ===")
-    
-    scanner = XRayScanner("enhanced_config.json")
-    scanner.load_volume("phantom_bone.zarr", "phantom_bone.json")
-    
-    angles = np.linspace(0, 180, 90)  # Same angles for fair comparison 
-    
-    # Tomography
-    print("Running tomography...")
-    tomo_proj, tomo_dose = scanner.tomography_scan(
-        angles, "compare_tomo.h5", calculate_dose=True
-    )
-    
-    # Laminography at 45°
-    print("Running laminography...")
-    lamino_proj, lamino_dose = scanner.laminography_scan(
-        angles, tilt_deg=45, output_file="compare_lamino.h5", calculate_dose=True
-    )
-    
-    print("Geometry comparison completed")
-    return tomo_dose, lamino_dose
-
-def example_material_specific_dose():
-    """Analyze dose for specific materials."""
-    print("\n=== MATERIAL-SPECIFIC DOSE ===")
-    
-    dose_map, dose_stats = analyze_dose_only(
-        "phantom_bone.zarr",
-        "phantom_bone.json",
-        "enhanced_config.json"
-    )
-    
-    # Find highest dose material
-    max_dose_material = max(dose_stats.items(), key=lambda x: x[1]['max_dose_gy'])
-    print(f"\nHighest dose material: {max_dose_material[1]['material_name']}")
-    print(f"Max dose: {max_dose_material[1]['max_dose_gy']:.2e} Gy")
-    
-    # Find largest volume material
-    max_volume_material = max(dose_stats.items(), key=lambda x: x[1]['total_volume_um3'])
-    print(f"\nLargest volume material: {max_volume_material[1]['material_name']}")
-    print(f"Volume: {max_volume_material[1]['total_volume_um3']:.1f} μm³")
-
-def main():
-    """Run all examples."""
-    print("ENHANCED X-RAY SIMULATION EXAMPLES")
-    print("=" * 60)
-    print("Features: Photon statistics, dose calculation, material analysis")
-    print("=" * 60)
-    
-    try:
-        # Setup
-        create_enhanced_config()
-        
-        # Generate test phantom if needed
-        import os
-        if not os.path.exists("phantom_dose_test.zarr"):
-            print("Generating bone phantom...")
-            from msim.generate_phantom import generate_phantom
-            generate_phantom("bone", shape=(64, 96, 96), voxel_size=(0.5, 0.5, 0.5))
-        
-        # Run examples
-        #example_basic_scan()
-        #example_dose_analysis()
-        example_full_scan_with_dose()
-        #example_parameter_study()
-        #example_compare_geometries()
-        #example_material_specific_dose()
-        
-        print("\n" + "=" * 60)
-        print("All examples completed successfully!")
-        print("\nOutput files created:")
-        print("- basic_tomo.h5 (basic tomography)")
-        print("- tomo_with_dose.h5 (tomography + dose)")
-        print("- tomo_photons_*.h5 (parameter study)")
-        print("- compare_*.h5 (geometry comparison)")
-        print("- enhanced_config.json (configuration)")
-        
-    except Exception as e:
-        print(f"Error: {e}")
-        import traceback
-        traceback.print_exc()
+# ----------------------------
+# Percorsi dei file
+# ----------------------------
+zarr_path = "/mnt/c/Users/noemi/Desktop/Noe/examples/brain_map.zarr"
+json_path = "/mnt/c/Users/noemi/Desktop/Noe/examples/brain_lookup.json"
+
+# ----------------------------
+# Wrapper minimale per caricare volume
+# ----------------------------
+class VolumeLoader:
+    def __init__(self):
+        self.volume = None
+        self.lookup = {}
+
+    def load_volume(self, volume_path, json_path):
+        """Legge il volume Zarr e il lookup JSON."""
+        try:
+            z = zarr.open(volume_path, mode="r")
+            self.volume = np.array(z)
+            print(f"Volume caricato: shape={self.volume.shape}, dtype={self.volume.dtype}")
+        except Exception as e:
+            raise RuntimeError(f"Errore nel caricamento del volume Zarr: {e}")
+
+        if os.path.exists(json_path):
+            try:
+                with open(json_path, "r") as f_json:
+                    self.lookup = json.load(f_json)
+                print(f"Lookup JSON caricato: {len(self.lookup)} etichette")
+            except Exception as e:
+                print(f"Errore nel caricamento del JSON: {e}")
+
+def visualize_volume(volume_3d):
+    """Visualizza il volume come stack di slice in Napari."""
+    viewer = napari.Viewer()
+    viewer.add_image(volume_3d, name="Volume 3D / Slice Stack", colormap="gray")
+    napari.run()
+
+def main():
+    loader = VolumeLoader()
+    loader.load_volume(zarr_path, json_path)
+    visualize_volume(loader.volume)
 
 if __name__ == "__main__":
     main()
Index: examples/tomobrain_simulation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/examples/tomobrain_simulation.py b/examples/tomobrain_simulation.py
new file mode 100644
--- /dev/null	(date 1760027825349)
+++ b/examples/tomobrain_simulation.py	(date 1760027825349)
@@ -0,0 +1,308 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+"""
+Brain micro-CT @ 50 keV (fix):
+- voxel 20 µm (override in cm)
+- 50 keV
+- Visualizza sia RAW counts che LOG
+- Limiti di contrasto robusti (per-immagine) per PNG
+- Diagnostica SNR e percentili
+"""
+
+import os
+import json
+import zarr
+import numpy as np
+import matplotlib.pyplot as plt
+from msim.simulator import XRayScanner
+
+# ============================
+#        PARAMETRI TOP
+# ============================
+BASE_PATH = "/mnt/c/Users/noemi/Desktop/Noe/examples"
+ZARR_FILE = os.path.join(BASE_PATH, "brain_map.zarr")
+JSON_FILE = os.path.join(BASE_PATH, "brain_lookup.json")
+CONFIG_FILE = os.path.join(BASE_PATH, "enhanced_config.json")
+
+ANGLE_MODE = "golden"      # "golden" | "linspace"
+N_PROJ = 50
+CALCULATE_DOSE = False
+
+# --- voxel 20 µm -> 0.002 cm ---
+# IMPORTANTE: usa cm se mu è in cm^-1 come nel tuo JSON.
+VOXEL_SIZE_OVERRIDE_CM = [0.002, 0.002, 0.002]
+
+# A 50 keV lasciamo i molli senza boost artificiale
+SOFT_TISSUE_SCALE = 1.0
+
+# Se lo scanner vuole radianti, impostare True
+ANGLES_IN_RADIANS = False
+
+# Se True, lascia che Napari autoscalibri i contrasti da solo
+NAPARI_AUTOSCALE = False
+
+# Preset fotoni: scegli "low_dose", "standard", "high_snr"
+PHOTON_MODE = "standard"
+PHOTON_PRESETS = {
+    "low_dose": 1e6,
+    "standard": 5e6,   # default
+    "high_snr": 2e7,
+}
+
+# ============================
+#   CONFIG ENHANCED PER BRAIN
+# ============================
+def create_enhanced_config_brain(path=CONFIG_FILE):
+    photons = PHOTON_PRESETS.get(PHOTON_MODE, PHOTON_PRESETS["standard"])
+    cfg = {
+        "ENERGY_KEV": 50.0,
+        "DETECTOR_DIST": 0.2,        # m
+        "DETECTOR_PIXEL_SIZE": 5e-6, # m, 5 µm
+        "PAD": 50,
+
+        # fisica: “aspetto CT” assorbitivo
+        "ENABLE_PHASE": False,
+        "ENABLE_ABSORPTION": True,
+        "ENABLE_SCATTER": True,
+
+        # statistiche fotoni / rumori
+        "INCIDENT_PHOTONS": photons,
+        "DETECTOR_EFFICIENCY": 0.8,
+        "DARK_CURRENT": 5,
+        "READOUT_NOISE": 3,
+        "ENABLE_PHOTON_NOISE": True
+    }
+    with open(path, "w") as f:
+        json.dump(cfg, f, indent=2)
+    print(f"[OK] Creato config: {path}  |  ENERGY_KEV=50.0  INCIDENT_PHOTONS={photons:.2e}")
+    return cfg
+
+# ============================
+#       UTIL / PIPELINE
+# ============================
+def quick_diagnostics(arr, name):
+    """Stampa range e percentili per capire la finestratura."""
+    a = np.asarray(arr, dtype=np.float32)
+    try:
+        p1 = float(np.percentile(a, 1))
+        p99 = float(np.percentile(a, 99))
+    except Exception:
+        p1 = p99 = float("nan")
+    print(
+        f"[DIAG] {name}: shape={a.shape}  "
+        f"min={float(np.min(a)):.4g}  p1={p1:.4g}  "
+        f"med={float(np.median(a)):.4g}  p99={p99:.4g}  "
+        f"max={float(np.max(a)):.4g}"
+    )
+
+def load_volume_and_lookup(zarr_path, json_path):
+    if not os.path.exists(zarr_path): raise FileNotFoundError(zarr_path)
+    if not os.path.exists(json_path): raise FileNotFoundError(json_path)
+
+    z = zarr.open(zarr_path, mode='r')
+    volume_labels = z[:]
+    with open(json_path, "r") as f:
+        meta = json.load(f)
+
+    lookup = meta["lookup"]
+
+    # MU map (cm^-1), con eventuale scaling per tessuti molli (qui 1.0 a 50 keV)
+    volume_mu = np.zeros_like(volume_labels, dtype=np.float32)
+    for label_str, props in lookup.items():
+        label = int(label_str)
+        mu = float(props["mu"])  # atteso cm^-1 dal tuo JSON
+        if 0.15 <= mu <= 0.30 and SOFT_TISSUE_SCALE != 1.0:
+            mu *= SOFT_TISSUE_SCALE
+        volume_mu[volume_labels == label] = mu
+
+    voxel_size_cm = VOXEL_SIZE_OVERRIDE_CM
+
+    print(f"[INFO] Volume shape: {volume_mu.shape}")
+    print(f"[INFO] mu min/max (cm^-1): {float(volume_mu.min())} / {float(volume_mu.max())}")
+    print(f"[INFO] voxel_size (cm): {voxel_size_cm}")
+    return volume_mu, lookup, voxel_size_cm
+
+#6 Generazione degli angoli
+
+def make_angles(n_proj, mode="golden"):
+    if mode == "golden":
+        golden_a = 180*(3 - np.sqrt(5)) / 2.0  # ~137.5077/2 = 41.41°
+        ang = np.mod(np.arange(n_proj) * golden_a, 180.0)
+        ang = np.sort(ang)
+    else:
+        ang = np.linspace(0.0, 180.0, n_proj, endpoint=False)
+    if ANGLES_IN_RADIANS:
+        ang = np.deg2rad(ang)
+    unit = 'rad' if ANGLES_IN_RADIANS else 'deg'
+    print(f"[INFO] Angoli ({unit}): {np.array2string(ang[:10], precision=2, separator=', ')} ...")
+    return ang
+
+def to_log_domain(projections, per_proj=True, eps=1e-12):
+    """
+    Converte I -> -log(I/I0).
+    - per_proj=True: stima I0 per ogni proiezione (p99.9 su HxW)
+    - pulisce NaN/Inf
+    Ritorna: (proj_log, I0) dove I0 ha shape:
+      - (N,1,1) se per_proj, altrimenti scalare.
+    """
+    I = projections.astype(np.float32)
+    I = np.clip(I, eps, None)
+
+    if per_proj:
+        I0 = np.percentile(I, 99.9, axis=(1,2), keepdims=True).astype(np.float32)
+    else:
+        I0 = float(np.percentile(I, 99.9))
+    proj_log = -np.log(I / (I0 + eps)).astype(np.float32)
+
+    # pulizia numerica
+    proj_log = np.nan_to_num(proj_log, nan=0.0, posinf=0.0, neginf=0.0)
+    return proj_log, I0
+
+def save_png_stack(stack, out_dir, prefix="proj_", percentiles=(1, 99)):
+    """
+    Salva PNG con *per-immagine* autoscale robusto (percentili).
+    Evita vmin==vmax; in tal caso allarga di un epsilon.
+    """
+    os.makedirs(out_dir, exist_ok=True)
+    saved = 0
+    last_vminvmax = None
+    for i, img in enumerate(stack):
+        img = np.asarray(img, dtype=np.float32)
+        vmin = np.percentile(img, percentiles[0])
+        vmax = np.percentile(img, percentiles[1])
+
+        if not np.isfinite(vmin):
+            vmin = float(np.nanmin(img))
+        if not np.isfinite(vmax):
+            vmax = float(np.nanmax(img))
+        if vmin == vmax:
+            # allarga leggermente la finestra
+            delta = 1e-6 if vmax == 0 else 1e-3*abs(vmax)
+            vmin -= delta; vmax += delta
+
+        plt.imsave(os.path.join(out_dir, f"{prefix}{i:03d}.png"),
+                   img, cmap='gray', vmin=vmin, vmax=vmax)
+        saved += 1
+        last_vminvmax = (float(vmin), float(vmax))
+
+    if last_vminvmax is None:
+        print(f"[WARN] Nessuna immagine salvata in {out_dir}")
+        return None, None
+    print(f"[OK] PNG salvate in: {out_dir} (autoscale per immagine; ultimo vmin={last_vminvmax[0]:.4g}, vmax={last_vminvmax[1]:.4g})")
+    return last_vminvmax
+
+# ============================
+#            MAIN
+# ============================
+def main():
+    # 1) Config
+    create_enhanced_config_brain(CONFIG_FILE)
+
+    # 2) Volume e lookup (mu in cm^-1, voxel in cm)
+    volume_mu, lookup, voxel_size_cm = load_volume_and_lookup(ZARR_FILE, JSON_FILE)
+
+    # 3) Scanner
+    scanner = XRayScanner(CONFIG_FILE)
+    scanner.volume = volume_mu
+    scanner.lookup = lookup
+    scanner.voxel_size = voxel_size_cm  # coerente con mu in cm^-1
+
+    # 4) Angoli
+    angles = make_angles(N_PROJ, ANGLE_MODE)
+
+    # 5) Scan
+    out_h5 = os.path.join(BASE_PATH, "brain_tomo_50keV.h5")
+    projections, dose_stats = scanner.tomography_scan(
+        angles, out_h5, calculate_dose=CALCULATE_DOSE
+    )
+    print(f"[OK] Tomography completata: {projections.shape}")
+    quick_diagnostics(projections, "RAW projections")
+
+    # 6) Diagnostica SNR RAW
+    I = projections.astype(np.float32).reshape(projections.shape[0], -1)
+    print("[SNR] RAW (prime 5 proiezioni):")
+    for k in range(min(5, len(I))):
+        mean, std = I[k].mean(), I[k].std()
+        snr = mean/(std+1e-12)
+        print(f"  proj {k:03d}: mean={mean:.4g}  std={std:.4g}  SNR≈{snr:.2f}")
+
+    # 7) Salva stack RAW .npy
+    npy_path = os.path.join(BASE_PATH, "brain_projections_50keV_RAW.npy")
+    np.save(npy_path, projections)
+    print(f"[OK] Stack RAW salvato: {npy_path}")
+
+    # 8) LOG domain + PNG
+    proj_log, I0_est = to_log_domain(projections, per_proj=True)
+    # I0_est shape (N,1,1), stampa i primi 5
+    print("[INFO] I0 stimati (p99.9 per-proiezione) primi 5:",
+          [float(x) for x in I0_est[:min(5, len(I0_est)), 0, 0]])
+    quick_diagnostics(proj_log, "LOG projections")
+
+    # 9) PNG (per-immagine autoscale)
+    png_dir_log = os.path.join(BASE_PATH, "brain_png_LOG_50keV")
+    _ = save_png_stack(proj_log, png_dir_log, prefix="proj_")
+
+    png_dir_raw = os.path.join(BASE_PATH, "brain_png_RAW_50keV")
+    _ = save_png_stack(projections.astype(np.float32), png_dir_raw, prefix="proj_")
+
+    # 10) Napari: RAW + LOG (compat con versioni senza kwarg 'interpolation')
+    try:
+        import napari
+        viewer = napari.Viewer()
+
+        if NAPARI_AUTOSCALE:
+            # Niente contrast_limits => autoscale
+            layer_raw = viewer.add_image(
+                projections.astype(np.float32),
+                name='Brain projections (RAW counts)',
+                colormap='gray'
+            )
+            layer_log = viewer.add_image(
+                proj_log,
+                name='Brain projections (LOG)',
+                colormap='gray'
+            )
+        else:
+            # Limiti globali robusti
+            vmin_raw = float(np.percentile(projections, 1))
+            vmax_raw = float(np.percentile(projections, 99))
+            vmin_log = float(np.percentile(proj_log, 1))
+            vmax_log = float(np.percentile(proj_log, 99))
+
+            layer_raw = viewer.add_image(
+                projections.astype(np.float32),
+                name='Brain projections (RAW counts)',
+                contrast_limits=(vmin_raw, vmax_raw),
+                colormap='gray'
+            )
+            layer_log = viewer.add_image(
+                proj_log,
+                name='Brain projections (LOG)',
+                contrast_limits=(vmin_log, vmax_log),
+                colormap='gray'
+            )
+
+        # Imposta l'interpolazione in modo "post-hoc" se esiste la proprietà
+        for layer in (layer_raw, layer_log):
+            if hasattr(layer, "interpolation"):  # napari < 0.5
+                try:
+                    layer.interpolation = 'nearest'
+                except Exception:
+                    pass
+            if hasattr(layer, "interpolation2d"):  # alcune versioni usano interpolation2d
+                try:
+                    layer.interpolation2d = 'nearest'
+                except Exception:
+                    pass
+
+        napari.run()
+    except Exception as e:
+        print("[WARN] Napari non disponibile / headless:", e)
+        print("Suggerimenti:")
+        print(" - Installa un backend Qt: pip install PyQt5  (oppure PySide6)")
+        print(" - Imposta X11: export QT_QPA_PLATFORM=xcb   (o offscreen)")
+        print(" - In WSL usa un server X (es. VcXsrv) o resta su PNG/NumPy.")
+
+
+if __name__ == "__main__":
+    main()
Index: examples/brain_lookup.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/examples/brain_lookup.json b/examples/brain_lookup.json
new file mode 100644
--- /dev/null	(date 1759541718104)
+++ b/examples/brain_lookup.json	(date 1759541718104)
@@ -0,0 +1,19 @@
+{
+  "voxel_size": [2.0, 2.0, 2.0],
+  "lookup": {
+    "0": {"name": "air", "density": 0.0012, "mu": 0.0},
+    "1": {"name": "gyrus corticali", "density": 1.03, "mu": 0.19},
+    "2": {"name": "ippocampo + amigdala", "density": 1.04, "mu": 0.2},
+    "3": {"name": "insula", "density": 1.045, "mu": 0.21},
+    "4": {"name": "globo pallidus + putamen", "density": 1.05, "mu": 0.23},
+    "5": {"name": "altro", "density": 1.06, "mu": 0.25}
+  },
+  "regions": [
+    {"ID": 0, "GroupID": 0},
+    {"ID": 1, "GroupID": 1},
+    {"ID": 2, "GroupID": 2},
+    {"ID": 3, "GroupID": 3},
+    {"ID": 4, "GroupID": 4},
+    {"ID": 5, "GroupID": 5}
+  ]
+}
Index: examples/enhanced_config.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"ENERGY_KEV\": 23.0,\r\n  \"DETECTOR_DIST\": 0.3,\r\n  \"DETECTOR_PIXEL_SIZE\": 5e-07,\r\n  \"PAD\": 50,\r\n  \"ENABLE_PHASE\": true,\r\n  \"ENABLE_ABSORPTION\": true,\r\n  \"ENABLE_SCATTER\": true,\r\n  \"INCIDENT_PHOTONS\": 1000000.0,\r\n  \"DETECTOR_EFFICIENCY\": 0.8,\r\n  \"DARK_CURRENT\": 10,\r\n  \"READOUT_NOISE\": 5,\r\n  \"ENABLE_PHOTON_NOISE\": true\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/examples/enhanced_config.json b/examples/enhanced_config.json
--- a/examples/enhanced_config.json	(revision 50a9c06bf40b6d4021d94c65c551f2e9cd2c81d4)
+++ b/examples/enhanced_config.json	(date 1760027842249)
@@ -1,14 +1,14 @@
 {
-  "ENERGY_KEV": 23.0,
-  "DETECTOR_DIST": 0.3,
-  "DETECTOR_PIXEL_SIZE": 5e-07,
+  "ENERGY_KEV": 50.0,
+  "DETECTOR_DIST": 0.2,
+  "DETECTOR_PIXEL_SIZE": 5e-06,
   "PAD": 50,
-  "ENABLE_PHASE": true,
+  "ENABLE_PHASE": false,
   "ENABLE_ABSORPTION": true,
   "ENABLE_SCATTER": true,
-  "INCIDENT_PHOTONS": 1000000.0,
+  "INCIDENT_PHOTONS": 5000000.0,
   "DETECTOR_EFFICIENCY": 0.8,
-  "DARK_CURRENT": 10,
-  "READOUT_NOISE": 5,
+  "DARK_CURRENT": 5,
+  "READOUT_NOISE": 3,
   "ENABLE_PHOTON_NOISE": true
 }
\ No newline at end of file
Index: .idea/git_toolbox_prj.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/git_toolbox_prj.xml b/.idea/git_toolbox_prj.xml
new file mode 100644
--- /dev/null	(date 1759542123659)
+++ b/.idea/git_toolbox_prj.xml	(date 1759542123659)
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GitToolBoxProjectSettings">
+    <option name="commitMessageIssueKeyValidationOverride">
+      <BoolValueOverride>
+        <option name="enabled" value="true" />
+      </BoolValueOverride>
+    </option>
+    <option name="commitMessageValidationEnabledOverride">
+      <BoolValueOverride>
+        <option name="enabled" value="true" />
+      </BoolValueOverride>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: examples/leggitomo.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/examples/leggitomo.py b/examples/leggitomo.py
new file mode 100644
--- /dev/null	(date 1759592988473)
+++ b/examples/leggitomo.py	(date 1759592988473)
@@ -0,0 +1,49 @@
+#!/usr/bin/env python3
+"""
+Visualizzazione del volume HDF5 generato dalla tomografia.
+Mostra tutte le slice come stack in Napari.
+"""
+
+import h5py
+import numpy as np
+import napari
+import os
+
+# Percorso del file HDF5 generato dalla tomografia
+h5_file_path = os.path.join(os.path.dirname(__file__), "tomo_with_dose.h5")
+
+def load_h5_volume(file_path):
+    """Carica il dataset principale dall'HDF5."""
+    if not os.path.exists(file_path):
+        raise FileNotFoundError(f"Il file HDF5 non esiste: {file_path}")
+
+    with h5py.File(file_path, "r") as f:
+        # Stampa i dataset disponibili
+        print("Dataset disponibili:", list(f.keys()))
+        dataset_name = list(f.keys())[0]  # prendi il primo dataset
+        data = f[dataset_name][:]
+        print(f"Volume caricato: shape={data.shape}, dtype={data.dtype}")
+    return data
+
+def normalize_volume(volume):
+    """Normalizza i valori del volume tra 0 e 1 per Napari."""
+    vol_min = np.min(volume)
+    vol_max = np.max(volume)
+    if vol_max - vol_min == 0:
+        return np.zeros_like(volume, dtype=np.float32)
+    normalized = (volume - vol_min) / (vol_max - vol_min)
+    return normalized.astype(np.float32)
+
+def visualize_volume(volume_3d):
+    """Visualizza il volume in Napari come stack 3D."""
+    viewer = napari.Viewer()
+    viewer.add_image(volume_3d, name="Tomografia", colormap="gray")
+    napari.run()
+
+def main():
+    volume = load_h5_volume(h5_file_path)
+    volume_norm = normalize_volume(volume)
+    visualize_volume(volume_norm)
+
+if __name__ == "__main__":
+    main()
Index: examples/golden_experimet_reco.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/examples/golden_experimet_reco.py b/examples/golden_experimet_reco.py
new file mode 100644
--- /dev/null	(date 1759786477511)
+++ b/examples/golden_experimet_reco.py	(date 1759786477511)
@@ -0,0 +1,163 @@
+#!/usr/bin/env python3
+"""
+Golden-angle tomography + ricostruzione FBP
+Compatibile TOCAI headless o con GUI (Napari)
+
+- Carica brain_map.zarr + JSON lookup
+- Converte label -> μ (cm^-1)
+- Simula tomografia golden-angle
+- Ricostruisce con TomoPy (gridrec)
+- Salva proiezioni, slice centrale e volume 3D
+- Visualizza in Napari se possibile
+"""
+#se non funziona exp libreria :
+import os
+import numpy as np
+import zarr
+import json
+import matplotlib.pyplot as plt
+from msim.simulator import XRayScanner
+
+def main():
+    base_path = "/mnt/c/Users/noemi/Desktop/Noe/examples/"
+    zarr_file = os.path.join(base_path, "brain_map.zarr")
+    json_file = os.path.join(base_path, "brain_lookup.json")
+    config_file = os.path.join(base_path, "enhanced_config.json")
+
+    # Controllo file
+    for f in [zarr_file, json_file, config_file]:
+        if not os.path.exists(f):
+            raise FileNotFoundError(f"{f} non trovato")
+
+    # Carica volume
+    print(f"[INFO] Caricando Zarr: {zarr_file}")
+    z = zarr.open(zarr_file, mode='r')
+    volume_labels = z[:]
+    print(f"[INFO] Volume shape: {volume_labels.shape}")
+
+    # Carica lookup
+    with open(json_file, 'r') as f:
+        metadata = json.load(f)
+    lookup = metadata["lookup"]
+    voxel_size = metadata.get("voxel_size", [1.0, 1.0, 1.0])
+
+    # 🔹 Converti label -> μ-map
+    volume_mu = np.zeros_like(volume_labels, dtype=np.float32)
+    for label_str, props in lookup.items():
+        label = int(label_str)
+        mu = float(props["mu"])  # cm^-1
+        volume_mu[volume_labels == label] = mu
+    print("[INFO] μ-map creata, pronto per la simulazione")
+
+    # Proiezione di test (vista frontale)
+    proj_test = volume_mu.sum(axis=0)
+    proj_norm = (proj_test - proj_test.min()) / (proj_test.max() - proj_test.min() + 1e-8)
+    test_png = os.path.join(base_path, "proiezione_test.png")
+    plt.imsave(test_png, proj_norm, cmap='gray')
+    print(f"[OK] Proiezione test salvata: {test_png}")
+
+    # !/usr/bin/env python3
+
+
+    # ----------------------------
+    # Parametri e percorso
+    # ----------------------------
+    base_path = "/mnt/c/Users/noemi/Desktop/Noe/examples/outputs"  # cartella dove salvare le immagini
+    os.makedirs(base_path, exist_ok=True)
+
+    # Simuliamo un volume 3D di esempio (sostituire con il tuo volume)
+    # volume_mu = np.load("volume.npy")
+    volume_mu = np.random.rand(384, 384, 100)  # esempio casuale
+
+    # ----------------------------
+    # Definizione delle proiezioni
+    # ----------------------------
+    proiezioni = {
+        "frontale": 0,  # somma lungo asse Z
+        "laterale": 1,  # somma lungo asse Y
+        "superiore": 2  # somma lungo asse X
+    }
+
+    # ----------------------------
+    # Calcolo e salvataggio delle proiezioni
+    # ----------------------------
+    fig, axes = plt.subplots(1, len(proiezioni), figsize=(15, 5))
+
+    for i, (nome, asse) in enumerate(proiezioni.items()):
+        proj = volume_mu.sum(axis=asse)
+        proj_norm = (proj - proj.min()) / (proj.max() - proj.min() + 1e-8)
+
+        filename = os.path.join(base_path, f"proiezione_{nome}.png")
+        plt.imsave(filename, proj_norm, cmap='gray')
+        print(f"[OK] Proiezione {nome} salvata: {filename}")
+
+        # Mostra le proiezioni nella figura finale
+        axes[i].imshow(proj_norm, cmap='gray')
+        axes[i].set_title(nome)
+        axes[i].axis('off')
+
+    plt.tight_layout()
+    plt.show()
+#---------------------------------------------------------------------
+    # Setup scanner
+    scanner = XRayScanner(config_file)
+    scanner.volume = volume_mu
+    scanner.lookup = lookup
+    scanner.voxel_size = voxel_size
+
+    # Golden-angle scan
+    golden_a = 180 * (3 - np.sqrt(5)) / 2
+    num_proj = 180
+    theta_start = 0
+    golden_angles_tomo = np.mod(theta_start + np.arange(num_proj) * golden_a, 180)
+    print(f"[INFO] Generati {num_proj} angoli golden")
+
+    out_file = os.path.join(base_path, "golden_tomo.h5")
+    projections, dose_stats = scanner.tomography_scan(
+        golden_angles_tomo,
+        out_file,
+        calculate_dose=False
+    )
+    print(f"[OK] Golden-angle scan salvato: {out_file}")
+
+    # Ricostruzione TomoPy
+    import tomopy
+    print("[INFO] Inizio ricostruzione (FBP - gridrec)...")
+    angles_rad = np.deg2rad(golden_angles_tomo)
+    recon = tomopy.recon(projections.astype(np.float32), angles_rad, algorithm='gridrec')
+    print(f"[OK] Ricostruzione completata, shape: {recon.shape}")
+
+    # Salva slice centrale
+    slice_idx = recon.shape[0] // 2
+    slice_img = recon[slice_idx]
+    slice_norm = (slice_img - np.min(slice_img)) / (np.max(slice_img) - np.min(slice_img) + 1e-12)
+    recon_png = os.path.join(base_path, "reconstruction_slice.png")
+    plt.imsave(recon_png, slice_norm, cmap='gray')
+    print(f"[OK] Slice centrale salvata: {recon_png}")
+
+    # Salva volume 3D
+    recon_npy = os.path.join(base_path, "brain_reconstruction.npy")
+    np.save(recon_npy, recon)
+    print(f"[OK] Volume ricostruito salvato: {recon_npy}")
+
+    # Visualizzazione Napari o salvataggio TIFF
+    try:
+        import napari
+        print("[INFO] Apro Napari per visualizzazione interattiva...")
+        viewer = napari.Viewer()
+        viewer.add_image(recon, name="Brain Reconstruction", colormap="gray")
+        napari.run()
+    except Exception as e:
+        print(f"[WARN] Napari non disponibile ({e}), salvo TIFF...")
+        try:
+            import tifffile
+            recon_tiff = os.path.join(base_path, "brain_reconstruction.tiff")
+            tifffile.imwrite(recon_tiff, recon.astype(np.float32))
+            print(f"[OK] Volume salvato come TIFF: {recon_tiff}")
+        except Exception as e2:
+            print(f"[WARN] TIFF non salvato ({e2})")
+
+    print("[DONE] Tutto completato ✅")
+
+if __name__ == "__main__":
+    main()
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1759538698197)
+++ b/.idea/vcs.xml	(date 1759538698197)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: examples/interlaceted/intelfran.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/examples/interlaceted/intelfran.py b/examples/interlaceted/intelfran.py
new file mode 100644
--- /dev/null	(date 1759805418030)
+++ b/examples/interlaceted/intelfran.py	(date 1759805418030)
@@ -0,0 +1,82 @@
+import time
+import numpy as np
+import matplotlib.pyplot as plt
+
+#Genera angoli interlacciati, num proiezioni(o angoli) da generare, numero di proiezioni per ogni “rotazione completa”
+def genang(numproj, nProj_per_rot):
+    """Interlaced angles generator
+    Parameters
+    ----------
+    numproj : int
+            Total number of projections.
+    nProj_per_rot : int
+            Number of projections per rotation.
+    """
+    prime = 3
+    pst = 0
+    pend = 360
+    seq = []
+    i = 0
+    while len(seq) < numproj:
+        b = i
+        i += 1
+        r = 0
+        q = 1 / prime
+        while (b != 0):
+            a = np.mod(b, prime)
+            r += (a * q)
+            q /= prime
+            b = np.floor(b / prime)
+        r *= ((pend-pst) / nProj_per_rot)
+        k = 0
+        while (np.logical_and(len(seq) < numproj, k < nProj_per_rot)):
+            seq.append((pst + (r + k * (pend-pst) / nProj_per_rot))/180*np.pi)
+            k += 1
+    return seq
+
+def line_plot(theta):
+
+    # Plot
+    plt.figure(figsize=(8, 5))
+    plt.plot(theta, marker='o', linestyle='-', color='b')  # you can customize markers, colors, etc.
+    plt.title('Theta values')
+    plt.xlabel('Index')
+    plt.ylabel('Theta (rad)')
+    plt.grid(True)
+    plt.show()
+
+def circle_plot(theta):
+
+    # Convert to x, y coordinates
+    x = np.cos(theta)
+    y = np.sin(theta)
+
+    # Identify rotation number for each point
+    rotations = np.floor(theta / (2 * np.pi)).astype(int)
+    num_rotations = rotations.max() + 1
+
+    # Create the plot
+    plt.figure(figsize=(6, 6))
+    cmap = plt.cm.viridis
+
+    # Plot each rotation with a different color (dots only)
+    for r in range(num_rotations):
+        mask = rotations == r
+        if np.any(mask):
+            plt.scatter(x[mask], y[mask], color=cmap(r / max(1, num_rotations - 1)), s=15, label=f'Rotation {r+1}')
+
+    # Make it look like a circle
+    plt.gca().set_aspect('equal', 'box')
+    plt.title('Theta plotted on a circle (colored per rotation)')
+    plt.xlabel('cos(θ)')
+    plt.ylabel('sin(θ)')
+    plt.grid(True)
+    plt.show()
+
+if __name__ == "__main__":
+
+    ntheta = 45  # Total number of projections
+    nthetap = 15  # Number of angles per rotation
+    theta = np.array(genang(ntheta, nthetap), dtype='float32')
+    line_plot(theta)
+    circle_plot(theta)
\ No newline at end of file
Index: playangles/samplangle.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/playangles/samplangle.py b/playangles/samplangle.py
new file mode 100644
--- /dev/null	(date 1759808555450)
+++ b/playangles/samplangle.py	(date 1759808555450)
@@ -0,0 +1,80 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# ------------------------------
+# Definizione degli angoli
+# ------------------------------
+# Golden Angle
+golden_a = 180*(3 - np.sqrt(5)) / 2  # deg
+
+# Campionamenti
+angoli_1grado = np.arange(0, 2000, 1)       # passo 1°
+angoli_10gradi = np.arange(0, 2000, 10)     # passo 10°
+angoli_golden = np.arange(0, 2000, golden_a)  # passo golden
+
+# Conversione in radianti per il polare
+angoli_1_rad = np.deg2rad(angoli_1grado)
+angoli_10_rad = np.deg2rad(angoli_10gradi)
+angoli_golden_rad = np.deg2rad(angoli_golden)
+
+# Vettori r per il polare
+r_1 = np.ones_like(angoli_1_rad)
+r_10 = np.ones_like(angoli_10_rad)
+r_golden = np.ones_like(angoli_golden_rad)
+
+# ------------------------------
+# Stampa dei valori
+# ------------------------------
+print("Golden angles in gradi:", angoli_golden)
+print("Golden angles in radianti:", angoli_golden_rad)
+print("Vettore r_golden:", r_golden)
+
+# ------------------------------
+# Plot polare
+# ------------------------------
+
+
+r_1 = np.ones_like(angoli_1_rad) * 0.4      # cerchio interno
+r_10 = np.ones_like(angoli_10_rad) * 0.7    # cerchio medio
+r_golden = np.ones_like(angoli_golden_rad) * 1  # cerchio esterno
+
+
+plt.figure(figsize=(7, 7))
+plt.subplot(projection='polar')
+plt.scatter(angoli_1_rad, r_1, c='blue', s=10, label='1°')
+plt.scatter(angoli_10_rad, r_10, c='red', s=30, label='10°')
+plt.scatter(angoli_golden_rad, r_golden, c='green', s=20, label='Golden Angle')
+
+plt.title("Confronto campionamenti angolari (polare)")
+plt.yticks([])  # togliamo i raggi concentrici
+plt.legend(loc='upper right')
+plt.show()
+
+# ------------------------------
+# Plot lineare con linee e punti
+# ------------------------------
+# Y costante per distinguere i campionamenti
+y_1 = np.ones_like(angoli_1grado)
+y_10 = np.ones_like(angoli_10gradi) * 0.5
+y_golden = np.ones_like(angoli_golden) * 0.25
+
+plt.figure(figsize=(10, 3))
+
+# Passo 1°
+plt.plot(angoli_1grado, y_1, c='blue', linewidth=1, alpha=0.5)
+plt.scatter(angoli_1grado, y_1, c='blue', s=10, label='1°')
+
+# Passo 10°
+plt.plot(angoli_10gradi, y_10, c='red', linewidth=1, alpha=0.5)
+plt.scatter(angoli_10gradi, y_10, c='red', s=30, label='10°')
+
+# Golden Angle
+plt.plot(angoli_golden, y_golden, c='green', linewidth=1, alpha=0.5)
+plt.scatter(angoli_golden, y_golden, c='green', s=20, label='Golden Angle')
+
+plt.yticks([0.25, 0.5, 1], ['Golden', '10°', '1°'])
+plt.xlabel("Angolo (°)")
+plt.title("Confronto campionamenti angolari con linee")
+plt.legend(loc='upper right')
+plt.grid(True, axis='x', linestyle='--', alpha=0.5)
+plt.show()
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1759538698201)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1759538698201)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: playangles/exe_interlac.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/playangles/exe_interlac.py b/playangles/exe_interlac.py
new file mode 100644
--- /dev/null	(date 1759809800217)
+++ b/playangles/exe_interlac.py	(date 1759809800217)
@@ -0,0 +1,157 @@
+# compare_sampling.py
+# Confronto: sequenziale, interlacciato, golden-angle (111.246°, 68.754°) e 137.508° (360°)
+# Produce grafici polari + istogrammi dei gap e CSV con angoli e metriche.
+
+import numpy as np
+import matplotlib.pyplot as plt
+import pandas as pd
+
+# =========================
+# Parametri principali
+# =========================
+N = 300                 # numero di proiezioni
+DOMAIN_DEG = 180.0      # 180° per parallel-beam (simmetria); usa 360.0 per rotazione completa
+
+phi = (1 + np.sqrt(5.0)) / 2.0
+DELTA_GOLD_180   = 180.0 / phi                 # ≈ 111.246°
+DELTA_GOLD_COMP  = 180.0 * (1 - 1 / phi)       # ≈ 68.754°  (equivalente modulo 180°)
+DELTA_GOLD_137   = 360.0 * (1 - 1 / phi)       # ≈ 137.508° (≡ 360/phi^2), usato su 360°
+
+# =========================
+# Generatori di angoli
+# =========================
+def angles_sequential(n, domain_deg=180.0):
+    """0°, 1°, 2°,... (mod domain_deg)."""
+    return np.mod(np.arange(n), domain_deg)
+
+def angles_interleaved(n, k_groups=2, domain_deg=180.0):
+    """Interleave su k gruppi di una griglia intera [0, domain_deg). Per k=2: pari poi dispari."""
+    base = np.arange(int(domain_deg))
+    groups = [base[i::k_groups] for i in range(k_groups)]
+    pattern = np.concatenate(groups)
+    return np.resize(pattern.astype(float), n) % domain_deg
+
+def angles_golden(n, domain_deg, delta_deg):
+    """Sequenza deterministica con incremento costante delta_deg (mod domain_deg)."""
+    return np.mod(np.arange(n) * delta_deg, domain_deg)
+
+# =========================
+# Gap circolari e metriche
+# =========================
+def angular_gaps(angles_deg, domain_deg=180.0):
+    a = np.sort(np.mod(angles_deg, domain_deg))
+    diffs = np.diff(a)
+    wrap = domain_deg - a[-1] + a[0]
+    return np.concatenate([diffs, [wrap]])
+
+def gap_summary(gaps):
+    mean = float(np.mean(gaps))
+    std = float(np.std(gaps, ddof=1))
+    return {
+        "count": int(len(gaps)),
+        "min_gap_deg": float(np.min(gaps)),
+        "max_gap_deg": float(np.max(gaps)),
+        "mean_gap_deg": mean,
+        "std_gap_deg": std,
+        "cv_gap": float(std / mean) if mean != 0 else np.nan,
+        "max_abs_dev_from_mean_deg": float(np.max(np.abs(gaps - mean))),
+    }
+
+# =========================
+# Plot helpers
+# =========================
+def plot_polar(angles_deg, title):
+    r = np.ones_like(angles_deg)
+    theta = np.deg2rad(angles_deg)
+    fig = plt.figure()
+    ax = plt.subplot(111, projection='polar')
+    ax.scatter(theta, r, s=14)  # colore default
+    ax.set_rticks([])
+    ax.set_title(title, va='bottom')
+    plt.show()
+
+def plot_gap_hist(gaps, title):
+    fig = plt.figure()
+    ax = fig.add_subplot(111)
+    ax.hist(gaps, bins=20)       # colore default
+    ax.set_xlabel("Angular gaps (degrees)")
+    ax.set_ylabel("Count")
+    ax.set_title(title)
+    plt.show()
+
+# =========================
+# Esecuzione
+# =========================
+if __name__ == "__main__":
+    # Sequenze su 180°
+    seq        = angles_sequential(N, domain_deg=DOMAIN_DEG)
+    inter      = angles_interleaved(N, k_groups=2, domain_deg=DOMAIN_DEG)
+    gold_180   = angles_golden(N, domain_deg=DOMAIN_DEG, delta_deg=DELTA_GOLD_180)
+    gold_comp  = angles_golden(N, domain_deg=DOMAIN_DEG, delta_deg=DELTA_GOLD_COMP)
+
+    # Sequenza 137.508° su 360° (tipica per spiral/3D)
+    gold_137_360 = angles_golden(N, domain_deg=360.0, delta_deg=DELTA_GOLD_137)
+    # Versione "folded" su 180° per confronto con parallel-beam
+    gold_137_folded = np.mod(gold_137_360, DOMAIN_DEG)
+
+    # --- Grafici polari (tutti riportati su 180° per confronto diretto) ---
+    plot_polar(seq,        f"Sequential (N={N})")
+    plot_polar(inter,      f"Interleaved (N={N})")
+    plot_polar(gold_180,   f"Golden-angle 180° (Δ≈{DELTA_GOLD_180:.3f}°)")
+    plot_polar(gold_comp,  f"Golden-angle 180° complementare (Δ≈{DELTA_GOLD_COMP:.3f}°)")
+    plot_polar(gold_137_folded, f"Golden 137° (360°) riportato su 180° (Δ≈{DELTA_GOLD_137:.3f}°)")
+
+    # --- Gap e istogrammi (su 180°) ---
+    gaps_seq   = angular_gaps(seq,  domain_deg=DOMAIN_DEG)
+    gaps_inter = angular_gaps(inter, domain_deg=DOMAIN_DEG)
+    gaps_g180  = angular_gaps(gold_180, domain_deg=DOMAIN_DEG)
+    gaps_gcomp = angular_gaps(gold_comp, domain_deg=DOMAIN_DEG)
+    gaps_g137  = angular_gaps(gold_137_folded, domain_deg=DOMAIN_DEG)
+
+    plot_gap_hist(gaps_seq,   "Gap — Sequential (180°)")
+    plot_gap_hist(gaps_inter, "Gap — Interleaved (180°)")
+    plot_gap_hist(gaps_g180,  "Gap — Golden 180° Δ=180/φ")
+    plot_gap_hist(gaps_gcomp, "Gap — Golden 180° Δ=180(1-1/φ)")
+    plot_gap_hist(gaps_g137,  "Gap — Golden 137° (folded su 180°)")
+
+    # --- Salvataggio CSV ---
+    angles_df = pd.DataFrame({
+        "index": np.arange(N),
+        "sequential_deg": seq,
+        "interleaved_deg": inter,
+        "golden_180_deg": gold_180,
+        "golden_180_complement_deg": gold_comp,
+        "golden_137_deg_on_360": gold_137_360,
+        "golden_137_folded_on_180": gold_137_folded
+    })
+    angles_df.to_csv("angle_sequences.csv", index=False)
+
+    # Gap distributions (long format)
+    gap_dist_df = pd.DataFrame({
+        "scheme": (["sequential"] * len(gaps_seq)) +
+                  (["interleaved"] * len(gaps_inter)) +
+                  (["golden_180"] * len(gaps_g180)) +
+                  (["golden_180_comp"] * len(gaps_gcomp)) +
+                  (["golden_137_folded"] * len(gaps_g137)),
+        "gap_deg": np.concatenate([gaps_seq, gaps_inter, gaps_g180, gaps_gcomp, gaps_g137])
+    })
+    gap_dist_df.to_csv("gap_distributions.csv", index=False)
+
+    # Gap metrics summary
+    metrics = []
+    for name, gaps in [
+        ("sequential", gaps_seq),
+        ("interleaved", gaps_inter),
+        ("golden_180", gaps_g180),
+        ("golden_180_comp", gaps_gcomp),
+        ("golden_137_folded", gaps_g137),
+    ]:
+        s = gap_summary(gaps); s["scheme"] = name; metrics.append(s)
+    metrics_df = pd.DataFrame(metrics)[
+        ["scheme","count","min_gap_deg","max_gap_deg","mean_gap_deg","std_gap_deg","cv_gap","max_abs_dev_from_mean_deg"]
+    ]
+    metrics_df.to_csv("gap_metrics.csv", index=False)
+
+    print("Δ (deg): 180/φ = %.6f, 180(1-1/φ) = %.6f, 360(1-1/φ) = %.6f"
+          % (DELTA_GOLD_180, DELTA_GOLD_COMP, DELTA_GOLD_137))
+    print("CSV salvati: angle_sequences.csv, gap_distributions.csv, gap_metrics.csv")
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1759538698174)
+++ b/.idea/modules.xml	(date 1759538698174)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/Noe.iml" filepath="$PROJECT_DIR$/.idea/Noe.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/Noe.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Noe.iml b/.idea/Noe.iml
new file mode 100644
--- /dev/null	(date 1759538698169)
+++ b/.idea/Noe.iml	(date 1759538698169)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="PyDocumentationSettings">
+    <option name="format" value="PLAIN" />
+    <option name="myDocStringFormat" value="Plain" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1759541853377)
+++ b/.idea/misc.xml	(date 1759541853377)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Black">
+    <option name="sdkName" value="Python 3.11" />
+  </component>
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: playangles/gap_metrics.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/playangles/gap_metrics.csv b/playangles/gap_metrics.csv
new file mode 100644
--- /dev/null	(date 1759809842760)
+++ b/playangles/gap_metrics.csv	(date 1759809842760)
@@ -0,0 +1,6 @@
+scheme,count,min_gap_deg,max_gap_deg,mean_gap_deg,std_gap_deg,cv_gap,max_abs_dev_from_mean_deg
+sequential,300,0.0,1.0,0.6,0.49071649206571843,0.8178608201095308,0.6
+interleaved,300,0.0,1.0,0.6,0.49071649206571843,0.8178608201095308,0.6
+golden_180,300,0.3454881705887374,0.9044997733180935,0.6,0.1981650472266958,0.3302750787111597,0.3044997733180935
+golden_180_comp,300,0.34548817058555414,0.904499773315365,0.6,0.1981650472268873,0.3302750787114788,0.30449977331536504
+golden_137_folded,300,0.5590116027233307,1.2499879439037613,0.6,0.10099854768954317,0.1683309128159053,0.6499879439037614
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1759538603761)
+++ b/.idea/.gitignore	(date 1759538603761)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: playangles/gap_distributions.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/playangles/gap_distributions.csv b/playangles/gap_distributions.csv
new file mode 100644
--- /dev/null	(date 1759809842741)
+++ b/playangles/gap_distributions.csv	(date 1759809842741)
@@ -0,0 +1,1501 @@
+scheme,gap_deg
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,0.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+sequential,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+interleaved,0.0
+interleaved,1.0
+interleaved,1.0
+golden_180,0.3454881705911248
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027242402
+golden_180,0.3454881705902153
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027242402
+golden_180,0.3454881705902153
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027251497
+golden_180,0.3454881705893058
+golden_180,0.5590116027269687
+golden_180,0.9044997733144555
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027251497
+golden_180,0.3454881705893058
+golden_180,0.5590116027269687
+golden_180,0.9044997733144555
+golden_180,0.5590116027251497
+golden_180,0.3454881705893058
+golden_180,0.5590116027269687
+golden_180,0.559011602725036
+golden_180,0.3454881705894195
+golden_180,0.5590116027269687
+golden_180,0.9044997733144555
+golden_180,0.5590116027260592
+golden_180,0.3454881705920343
+golden_180,0.5590116027233307
+golden_180,0.9044997733144555
+golden_180,0.5590116027260592
+golden_180,0.904499773315365
+golden_180,0.5590116027258318
+golden_180,0.34548817059226167
+golden_180,0.5590116027233307
+golden_180,0.9044997733144555
+golden_180,0.5590116027269687
+golden_180,0.3454881705911248
+golden_180,0.5590116027233307
+golden_180,0.9044997733180935
+golden_180,0.5590116027233307
+golden_180,0.9044997733144555
+golden_180,0.559011602726514
+golden_180,0.34548817059157955
+golden_180,0.5590116027233307
+golden_180,0.9044997733180935
+golden_180,0.5590116027233307
+golden_180,0.3454881705911248
+golden_180,0.5590116027233307
+golden_180,0.5590116027267413
+golden_180,0.3454881705913522
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027233307
+golden_180,0.3454881705911248
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027237855
+golden_180,0.34548817059067005
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027242402
+golden_180,0.3454881705902153
+golden_180,0.5590116027251497
+golden_180,0.5590116027258318
+golden_180,0.3454881705904427
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.559011602724695
+golden_180,0.34548817058976056
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.559011602724695
+golden_180,0.34548817058976056
+golden_180,0.5590116027269687
+golden_180,0.9044997733144555
+golden_180,0.5590116027251497
+golden_180,0.3454881705893058
+golden_180,0.5590116027269687
+golden_180,0.9044997733144555
+golden_180,0.5590116027269687
+golden_180,0.9044997733144555
+golden_180,0.5590116027256045
+golden_180,0.34548817058885106
+golden_180,0.5590116027269687
+golden_180,0.9044997733144555
+golden_180,0.5590116027260592
+golden_180,0.3454881705920343
+golden_180,0.5590116027233307
+golden_180,0.5590116027257181
+golden_180,0.3454881705887374
+golden_180,0.5590116027269687
+golden_180,0.9044997733144555
+golden_180,0.5590116027260592
+golden_180,0.3454881705920343
+golden_180,0.5590116027233307
+golden_180,0.9044997733180935
+golden_180,0.5590116027233307
+golden_180,0.9044997733144555
+golden_180,0.559011602726514
+golden_180,0.34548817059157955
+golden_180,0.5590116027233307
+golden_180,0.9044997733180935
+golden_180,0.5590116027233307
+golden_180,0.3454881705911248
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027233307
+golden_180,0.9044997733180935
+golden_180,0.5590116027237855
+golden_180,0.34548817059067005
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027242402
+golden_180,0.904499773317184
+golden_180,0.5590116027237855
+golden_180,0.34548817059067005
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027242402
+golden_180,0.3454881705902153
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.559011602724695
+golden_180,0.34548817058976056
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027251497
+golden_180,0.3454881705893058
+golden_180,0.5590116027269687
+golden_180,0.559011602724695
+golden_180,0.34548817058976056
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027251497
+golden_180,0.3454881705893058
+golden_180,0.5590116027269687
+golden_180,0.9044997733144555
+golden_180,0.5590116027260592
+golden_180,0.904499773315365
+golden_180,0.5590116027256045
+golden_180,0.34548817058885106
+golden_180,0.5590116027269687
+golden_180,0.9044997733144555
+golden_180,0.5590116027260592
+golden_180,0.3454881705920343
+golden_180,0.5590116027233307
+golden_180,0.9044997733144555
+golden_180,0.5590116027269687
+golden_180,0.9044997733144555
+golden_180,0.5590116027260592
+golden_180,0.3454881705920343
+golden_180,0.5590116027233307
+golden_180,0.9044997733180935
+golden_180,0.5590116027233307
+golden_180,0.3454881705911248
+golden_180,0.5590116027233307
+golden_180,0.5590116027264003
+golden_180,0.34548817059169323
+golden_180,0.5590116027233307
+golden_180,0.9044997733180935
+golden_180,0.5590116027233307
+golden_180,0.3454881705911248
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027233307
+golden_180,0.9044997733180935
+golden_180,0.5590116027233307
+golden_180,0.3454881705911248
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027242402
+golden_180,0.3454881705902153
+golden_180,0.5590116027251497
+golden_180,0.5590116027254908
+golden_180,0.34548817059078374
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027242402
+golden_180,0.3454881705902153
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027244676
+golden_180,0.34548817058998793
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027251497
+golden_180,0.3454881705893058
+golden_180,0.5590116027269687
+golden_180,0.9044997733144555
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027251497
+golden_180,0.3454881705893058
+golden_180,0.5590116027269687
+golden_180,0.9044997733144555
+golden_180,0.5590116027260592
+golden_180,0.3454881705920343
+golden_180,0.5590116027233307
+golden_180,0.5590116027253771
+golden_180,0.34548817058907844
+golden_180,0.5590116027269687
+golden_180,0.9044997733144555
+golden_180,0.5590116027260592
+golden_180,0.3454881705920343
+golden_180,0.5590116027233307
+golden_180,0.9044997733144555
+golden_180,0.5590116027269687
+golden_180,0.9044997733144555
+golden_180,0.5590116027260592
+golden_180,0.3454881705920343
+golden_180,0.5590116027233307
+golden_180,0.9044997733144555
+golden_180,0.5590116027269687
+golden_180,0.3454881705911248
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027233307
+golden_180,0.9044997733144555
+golden_180,0.5590116027269687
+golden_180,0.3454881705911248
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027242402
+golden_180,0.3454881705902153
+golden_180,0.5590116027269687
+golden_180,0.5590116027233307
+golden_180,0.3454881705911248
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027242402
+golden_180,0.3454881705902153
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027242402
+golden_180,0.3454881705902153
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027251497
+golden_180,0.3454881705893058
+golden_180,0.5590116027269687
+golden_180,0.5590116027243539
+golden_180,0.3454881705901016
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027251497
+golden_180,0.3454881705893058
+golden_180,0.5590116027269687
+golden_180,0.9044997733144555
+golden_180,0.5590116027260592
+golden_180,0.904499773315365
+golden_180,0.5590116027251497
+golden_180,0.3454881705893058
+golden_180,0.5590116027269687
+golden_180,0.9044997733144555
+golden_180,0.5590116027260592
+golden_180,0.3454881705920343
+golden_180,0.5590116027233307
+golden_180,0.9044997733144555
+golden_180,0.5590116027269687
+golden_180,0.9044997733144555
+golden_180,0.5590116027260592
+golden_180,0.3454881705920343
+golden_180,0.5590116027233307
+golden_180,0.9044997733144555
+golden_180,0.5590116027269687
+golden_180,0.3454881705911248
+golden_180,0.5590116027233307
+golden_180,0.5590116027260592
+golden_180,0.3454881705920343
+golden_180,0.5590116027233307
+golden_180,0.9044997733144555
+golden_180,0.5590116027269687
+golden_180,0.3454881705911248
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027233307
+golden_180,0.9044997733144555
+golden_180,0.5590116027269687
+golden_180,0.3454881705911248
+golden_180,0.5590116027251497
+golden_180,0.9044997733162745
+golden_180,0.5590116027242402
+golden_180,0.3454881705902153
+golden_180,0.5590116027251497
+golden_180,0.5590116027251497
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.3454881705874868
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.34548817058794157
+golden_180_comp,0.559011602726514
+golden_180_comp,0.904499773315365
+golden_180_comp,0.5590116027260592
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.3454881705883963
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.904499773313546
+golden_180_comp,0.5590116027260592
+golden_180_comp,0.34548817058851
+golden_180_comp,0.5590116027277645
+golden_180_comp,0.5590116027251497
+golden_180_comp,0.3454881705883963
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027251497
+golden_180_comp,0.34548817058885106
+golden_180_comp,0.5590116027274235
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027287877
+golden_180_comp,0.34548817058566783
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027287877
+golden_180_comp,0.3454881705858952
+golden_180_comp,0.5590116027267413
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027287877
+golden_180_comp,0.3454881705861226
+golden_180_comp,0.559011602726514
+golden_180_comp,0.904499773315365
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.3454881705865205
+golden_180_comp,0.559011602727935
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.3454881705865773
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.904499773313546
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.3454881705870321
+golden_180_comp,0.5590116027274235
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.3454881705874868
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.3454881705874868
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.3454881705874868
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.34548817058794157
+golden_180_comp,0.559011602726514
+golden_180_comp,0.904499773315365
+golden_180_comp,0.5590116027260592
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.3454881705883963
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.904499773313546
+golden_180_comp,0.5590116027260592
+golden_180_comp,0.3454881705886237
+golden_180_comp,0.5590116027276508
+golden_180_comp,0.904499773313546
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027251497
+golden_180_comp,0.34548817058885106
+golden_180_comp,0.5590116027274235
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027287877
+golden_180_comp,0.34548817058555414
+golden_180_comp,0.5590116027270824
+golden_180_comp,0.5590116027287877
+golden_180_comp,0.34548817058566783
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027287877
+golden_180_comp,0.3454881705858952
+golden_180_comp,0.5590116027267413
+golden_180_comp,0.904499773315365
+golden_180_comp,0.5590116027260592
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027287877
+golden_180_comp,0.3454881705865773
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.904499773313546
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.3454881705865773
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.904499773313546
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.3454881705870321
+golden_180_comp,0.5590116027274235
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.34548817058715997
+golden_180_comp,0.5590116027272956
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.3454881705874868
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.3454881705874868
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.34548817058794157
+golden_180_comp,0.559011602726514
+golden_180_comp,0.904499773315365
+golden_180_comp,0.5590116027260592
+golden_180_comp,0.34548817058816894
+golden_180_comp,0.5590116027281056
+golden_180_comp,0.5590116027251497
+golden_180_comp,0.3454881705883963
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.904499773313546
+golden_180_comp,0.5590116027260592
+golden_180_comp,0.3454881705883963
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.904499773313546
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027251497
+golden_180_comp,0.34548817058885106
+golden_180_comp,0.5590116027274235
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027287877
+golden_180_comp,0.34548817058566783
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027287877
+golden_180_comp,0.3454881705861226
+golden_180_comp,0.559011602726514
+golden_180_comp,0.904499773315365
+golden_180_comp,0.5590116027260592
+golden_180_comp,0.3454881705879984
+golden_180_comp,0.5590116027264571
+golden_180_comp,0.5590116027287877
+golden_180_comp,0.3454881705865773
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.904499773313546
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.3454881705865773
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.904499773313546
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.3454881705870321
+golden_180_comp,0.5590116027274235
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.34548817058725945
+golden_180_comp,0.5590116027271961
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.3454881705874868
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.34548817058794157
+golden_180_comp,0.559011602726514
+golden_180_comp,0.904499773315365
+golden_180_comp,0.5590116027260592
+golden_180_comp,0.34548817058816894
+golden_180_comp,0.5590116027281056
+golden_180_comp,0.904499773313546
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027251497
+golden_180_comp,0.34548817058885106
+golden_180_comp,0.5590116027274235
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027251497
+golden_180_comp,0.34548817058885106
+golden_180_comp,0.5590116027274235
+golden_180_comp,0.5590116027251497
+golden_180_comp,0.3454881705893058
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027287877
+golden_180_comp,0.34548817058566783
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027287877
+golden_180_comp,0.3454881705861226
+golden_180_comp,0.559011602726514
+golden_180_comp,0.904499773315365
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.3454881705861226
+golden_180_comp,0.559011602726514
+golden_180_comp,0.904499773315365
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.3454881705865773
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.904499773313546
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.3454881705868331
+golden_180_comp,0.5590116027276224
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.3454881705870321
+golden_180_comp,0.5590116027274235
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.34548817058725945
+golden_180_comp,0.5590116027271961
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.3454881705874868
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.3454881705878279
+golden_180_comp,0.5590116027266276
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.3454881705883963
+golden_180_comp,0.5590116027260592
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.3454881705883963
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.904499773313546
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027251497
+golden_180_comp,0.34548817058885106
+golden_180_comp,0.5590116027274235
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027251497
+golden_180_comp,0.34548817058885106
+golden_180_comp,0.5590116027274235
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027287877
+golden_180_comp,0.34548817058566783
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.34548817058765735
+golden_180_comp,0.5590116027267982
+golden_180_comp,0.5590116027287877
+golden_180_comp,0.34548817058566783
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.904499773315365
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.34548817058634995
+golden_180_comp,0.5590116027262866
+golden_180_comp,0.904499773315365
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.3454881705865773
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.904499773313546
+golden_180_comp,0.5590116027278782
+golden_180_comp,0.3454881705869184
+golden_180_comp,0.5590116027275371
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.3454881705874868
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.9044997733144555
+golden_180_comp,0.5590116027269687
+golden_180_comp,0.3454881705874868
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411749736
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027306067
+golden_137_folded,0.6909763411722452
+golden_137_folded,0.5590116027260592
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411758831
+golden_137_folded,0.5590116027278782
+golden_137_folded,0.5590116027251497
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411759968
+golden_137_folded,0.5590116027277645
+golden_137_folded,0.5590116027251497
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027306067
+golden_137_folded,0.6909763411731547
+golden_137_folded,0.5590116027251497
+golden_137_folded,0.5590116027306067
+golden_137_folded,0.5590116027233307
+golden_137_folded,0.6909763411767926
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027287877
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411731547
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027287877
+golden_137_folded,0.5590116027233307
+golden_137_folded,0.69097634117702
+golden_137_folded,0.5590116027267413
+golden_137_folded,0.5590116027287877
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027233307
+golden_137_folded,0.6909763411767926
+golden_137_folded,0.5590116027287877
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411740641
+golden_137_folded,0.5590116027278782
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027233307
+golden_137_folded,0.6909763411777021
+golden_137_folded,0.5590116027278782
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411745189
+golden_137_folded,0.5590116027274235
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,1.2499879439019423
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027306067
+golden_137_folded,0.6909763411713357
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411749736
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027306067
+golden_137_folded,0.6909763411717904
+golden_137_folded,0.559011602726514
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,1.2499879439019423
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411758831
+golden_137_folded,0.5590116027260592
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027306067
+golden_137_folded,0.6909763411722452
+golden_137_folded,0.5590116027278782
+golden_137_folded,0.5590116027251497
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411763379
+golden_137_folded,0.5590116027274235
+golden_137_folded,0.5590116027287877
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.690976341173041
+golden_137_folded,0.5590116027270824
+golden_137_folded,0.5590116027287877
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411731547
+golden_137_folded,0.5590116027287877
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027233307
+golden_137_folded,0.6909763411777021
+golden_137_folded,0.5590116027260592
+golden_137_folded,0.5590116027287877
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411740641
+golden_137_folded,0.5590116027278782
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027233307
+golden_137_folded,0.6909763411777021
+golden_137_folded,0.5590116027278782
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027233307
+golden_137_folded,0.6909763411786116
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411749736
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027306067
+golden_137_folded,0.6909763411713357
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411749736
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411749736
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027306067
+golden_137_folded,0.6909763411722452
+golden_137_folded,0.5590116027260592
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411758831
+golden_137_folded,0.5590116027278782
+golden_137_folded,0.5590116027251497
+golden_137_folded,0.5590116027306067
+golden_137_folded,0.6909763411722452
+golden_137_folded,0.5590116027278782
+golden_137_folded,0.5590116027251497
+golden_137_folded,0.5590116027269687
+golden_137_folded,1.2499879439037613
+golden_137_folded,0.5590116027251497
+golden_137_folded,0.5590116027306067
+golden_137_folded,0.5590116027233307
+golden_137_folded,0.6909763411767926
+golden_137_folded,0.5590116027287877
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411731547
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027287877
+golden_137_folded,0.5590116027233307
+golden_137_folded,0.6909763411772474
+golden_137_folded,0.559011602726514
+golden_137_folded,0.5590116027287877
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411736662
+golden_137_folded,0.5590116027264571
+golden_137_folded,0.5590116027287877
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411740641
+golden_137_folded,0.5590116027278782
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027233307
+golden_137_folded,0.6909763411777021
+golden_137_folded,0.5590116027278782
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411745189
+golden_137_folded,0.5590116027274235
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027306067
+golden_137_folded,0.6909763411711083
+golden_137_folded,0.5590116027271961
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027306067
+golden_137_folded,0.6909763411713357
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411749736
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027306067
+golden_137_folded,0.6909763411717904
+golden_137_folded,0.559011602726514
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411756558
+golden_137_folded,0.5590116027281056
+golden_137_folded,0.5590116027251497
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411767926
+golden_137_folded,0.5590116027251497
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027306067
+golden_137_folded,0.6909763411731547
+golden_137_folded,0.5590116027251497
+golden_137_folded,0.5590116027306067
+golden_137_folded,0.5590116027233307
+golden_137_folded,0.6909763411767926
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027287877
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411731547
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027287877
+golden_137_folded,0.5590116027269687
+golden_137_folded,1.2499879439001234
+golden_137_folded,0.5590116027287877
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027233307
+golden_137_folded,0.6909763411777021
+golden_137_folded,0.5590116027278782
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411740641
+golden_137_folded,0.5590116027278782
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027233307
+golden_137_folded,0.6909763411777021
+golden_137_folded,0.5590116027278782
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411743199
+golden_137_folded,0.5590116027276224
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411749736
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027306067
+golden_137_folded,0.6909763411713357
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411749736
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411753147
+golden_137_folded,0.5590116027266276
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027306067
+golden_137_folded,0.6909763411713357
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411758831
+golden_137_folded,0.5590116027278782
+golden_137_folded,0.5590116027251497
+golden_137_folded,0.5590116027306067
+golden_137_folded,0.6909763411726999
+golden_137_folded,0.5590116027274235
+golden_137_folded,0.5590116027251497
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411763379
+golden_137_folded,0.5590116027274235
+golden_137_folded,0.5590116027287877
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027233307
+golden_137_folded,0.6909763411767926
+golden_137_folded,0.5590116027287877
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411731547
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027287877
+golden_137_folded,0.5590116027233307
+golden_137_folded,0.6909763411767926
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027287877
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411738368
+golden_137_folded,0.5590116027262866
+golden_137_folded,0.5590116027287877
+golden_137_folded,0.5590116027269687
+golden_137_folded,1.2499879439019423
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027233307
+golden_137_folded,0.6909763411777021
+golden_137_folded,0.5590116027278782
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411749736
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027306067
+golden_137_folded,0.6909763411713357
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.5590116027269687
+golden_137_folded,0.6909763411749736
Index: playangles/angle_sequences.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/playangles/angle_sequences.csv b/playangles/angle_sequences.csv
new file mode 100644
--- /dev/null	(date 1759809842710)
+++ b/playangles/angle_sequences.csv	(date 1759809842710)
@@ -0,0 +1,301 @@
+index,sequential_deg,interleaved_deg,golden_180_deg,golden_180_complement_deg,golden_137_deg_on_360,golden_137_folded_on_180
+0,0.0,0.0,0.0,0.0,0.0,0.0
+1,1.0,2.0,111.24611797498108,68.75388202501894,137.50776405003788,137.50776405003788
+2,2.0,4.0,42.49223594996215,137.50776405003788,275.01552810007576,95.01552810007576
+3,3.0,6.0,153.73835392494323,26.26164607505683,52.52329215011366,52.52329215011366
+4,4.0,8.0,84.9844718999243,95.01552810007576,190.0310562001515,10.031056200151511
+5,5.0,10.0,16.230589874905377,163.76941012509468,327.53882025018936,147.53882025018936
+6,6.0,12.0,127.47670784988645,52.52329215011366,105.04658430022732,105.04658430022732
+7,7.0,14.0,58.72282582486753,121.27717417513259,242.55434835026517,62.55434835026517
+8,8.0,16.0,169.9689437998486,10.031056200151511,20.062112400303022,20.062112400303022
+9,9.0,18.0,101.21506177482968,78.78493822517044,157.56987645034087,157.56987645034087
+10,10.0,20.0,32.46117974981075,147.53882025018936,295.0776405003787,115.07764050037872
+11,11.0,22.0,143.70729772479172,36.292702275208285,72.58540455041657,72.58540455041657
+12,12.0,24.0,74.9534156997729,105.04658430022732,210.09316860045465,30.093168600454646
+13,13.0,26.0,6.199533674754093,173.80046632524625,347.6009326504925,167.6009326504925
+14,14.0,28.0,117.44565164973505,62.55434835026517,125.10869670053034,125.10869670053034
+15,15.0,30.0,48.69176962471602,131.30823037528398,262.61646075056797,82.61646075056797
+16,16.0,32.0,159.9378875996972,20.062112400303022,40.124224800606044,40.124224800606044
+17,17.0,34.0,91.1840055746784,88.81599442532206,177.63198885064412,177.63198885064412
+18,18.0,36.0,22.430123549659356,157.56987645034087,315.13975290068174,135.13975290068174
+19,19.0,38.0,133.67624152464032,46.32375847535991,92.64751695071982,92.64751695071982
+20,20.0,40.0,64.9223594996215,115.07764050037872,230.15528100075744,50.15528100075744
+21,21.0,42.0,176.1684774746027,3.8315225253977587,7.6630450507955175,7.6630450507955175
+22,22.0,44.0,107.41459544958343,72.58540455041657,145.17080910083314,145.17080910083314
+23,23.0,46.0,38.66071342456462,141.3392865754356,282.6785731508712,102.67857315087122
+24,24.0,48.0,149.9068313995458,30.093168600454646,60.18633720090929,60.18633720090929
+25,25.0,50.0,81.152949374527,98.84705062547346,197.69410125094691,17.694101250946915
+26,26.0,52.0,12.399067349508186,167.6009326504925,335.201865300985,155.201865300985
+27,27.0,54.0,123.64518532448892,56.35481467551131,112.70962935102261,112.70962935102261
+28,28.0,56.0,54.89130329947011,125.10869670053034,250.2173934010607,70.21739340106069
+29,29.0,58.0,166.1374212744513,13.862578725549156,27.725157451098312,27.725157451098312
+30,30.0,60.0,97.38353924943203,82.61646075056797,165.23292150113593,165.23292150113593
+31,31.0,62.0,28.629657224413222,151.37034277558723,302.74068555117447,122.74068555117447
+32,32.0,64.0,139.8757751993944,40.124224800606044,80.24844960121209,80.24844960121209
+33,33.0,66.0,71.1218931743756,108.87810682562485,217.7562136512497,37.75621365124971
+34,34.0,68.0,2.3680111493567892,177.63198885064412,355.26397770128824,175.26397770128824
+35,35.0,70.0,113.61412912433752,66.38587087566293,132.77174175132586,132.77174175132586
+36,36.0,72.0,44.86024709931871,135.13975290068174,270.2795058013635,90.27950580136348
+37,37.0,74.0,156.1063650742999,23.893634925700553,47.787269851401106,47.787269851401106
+38,38.0,76.0,87.35248304928064,92.64751695071982,185.29503390143964,5.295033901439638
+39,39.0,78.0,18.59860102426228,161.40139897573863,322.80279795147726,142.80279795147726
+40,40.0,80.0,129.844718999243,50.15528100075744,100.31056200151488,100.31056200151488
+41,41.0,82.0,61.09083697422375,118.9091630257767,237.8183260515534,57.81832605155341
+42,42.0,84.0,172.3369549492054,7.6630450507955175,15.326090101591035,15.326090101591035
+43,43.0,86.0,103.58307292418613,76.41692707581433,152.83385415162866,152.83385415162866
+44,44.0,88.0,34.82919089916686,145.17080910083314,290.3416182016663,110.34161820166628
+45,45.0,90.0,146.0753088741485,33.924691125852405,67.84938225170481,67.84938225170481
+46,46.0,92.0,77.32142684912924,102.67857315087122,205.35714630174243,25.357146301742432
+47,47.0,94.0,8.567544824110882,171.43245517589003,342.86491035178005,162.86491035178005
+48,48.0,96.0,119.81366279909162,60.18633720090929,120.37267440181859,120.37267440181859
+49,49.0,98.0,51.05978077407235,128.9402192259281,257.8804384518562,77.88043845185621
+50,50.0,100.0,162.305898749054,17.694101250946915,35.38820250189383,35.38820250189383
+51,51.0,102.0,93.55201672403473,86.44798327596573,172.89596655193145,172.89596655193145
+52,52.0,104.0,24.798134699016373,155.201865300985,310.40373060197,130.40373060196998
+53,53.0,106.0,136.0442526739971,43.9557473260038,87.9114946520076,87.9114946520076
+54,54.0,108.0,67.29037064897784,112.70962935102261,225.41925870204523,45.41925870204523
+55,55.0,110.0,178.53648862395949,1.4635113760414242,2.9270227520828485,2.9270227520828485
+56,56.0,112.0,109.78260659894022,70.21739340106069,140.43478680212138,140.43478680212138
+57,57.0,114.0,41.028724573920954,138.9712754260795,277.942550852159,97.942550852159
+58,58.0,116.0,152.2748425489026,27.725157451098312,55.450314902196624,55.450314902196624
+59,59.0,118.0,83.52096052388333,96.47903947611758,192.95807895223516,12.958078952235155
+60,60.0,120.0,14.767078498864066,165.23292150113593,330.46584300227187,150.46584300227187
+61,61.0,122.0,126.01319647384571,53.9868035261552,107.9736070523104,107.9736070523104
+62,62.0,124.0,57.259314448826444,122.74068555117447,245.48137110234893,65.48137110234893
+63,63.0,126.0,168.5054324238081,11.494567576192821,22.989135152385643,22.989135152385643
+64,64.0,128.0,99.75155039878882,80.24844960121209,160.49689920242417,160.49689920242417
+65,65.0,130.0,30.997668373769557,149.00233162623135,298.0046632524627,118.0046632524627
+66,66.0,132.0,142.2437863487512,37.75621365124971,75.51242730249942,75.51242730249942
+67,67.0,134.0,73.48990432373193,106.51009567626897,213.02019135253795,33.02019135253795
+68,68.0,136.0,4.7360222987135785,175.26397770128824,350.5279554025765,170.52795540257648
+69,69.0,138.0,115.98214027369431,64.0178597263066,128.0357194526132,128.0357194526132
+70,70.0,140.0,47.22825824867505,132.77174175132586,265.5434835026517,85.54348350265172
+71,71.0,142.0,158.4743762236567,21.52562377634422,43.05124755268844,43.05124755268844
+72,72.0,144.0,89.72049419863743,90.27950580136348,180.55901160272697,0.5590116027269687
+73,73.0,146.0,20.96661217361816,159.03338782638275,318.0667756527655,138.0667756527655
+74,74.0,148.0,132.2127301485998,47.787269851401106,95.57453970280221,95.57453970280221
+75,75.0,150.0,63.45884812358054,116.54115187642037,233.08230375284074,53.082303752840744
+76,76.0,152.0,174.70496609856127,5.295033901439638,10.590067802879275,10.590067802879275
+77,77.0,154.0,105.951084073542,74.048915926458,148.097831852916,148.097831852916
+78,78.0,156.0,37.19720204852456,142.80279795147726,285.6055959029545,105.60559590295452
+79,79.0,158.0,148.4433200235053,31.556679976496525,63.11335995299305,63.11335995299305
+80,80.0,160.0,79.68943799848603,100.31056200151488,200.62112400302976,20.621124003029763
+81,81.0,162.0,10.935555973466762,169.06444402653415,338.1288880530683,158.1288880530683
+82,82.0,164.0,122.1816739484475,57.81832605155341,115.63665210310683,115.63665210310683
+83,83.0,166.0,53.42779192343005,126.57220807657177,253.14441615314354,73.14441615314354
+84,84.0,168.0,164.67390989841078,15.326090101591035,30.65218020318207,30.65218020318207
+85,85.0,170.0,95.92002787339152,84.07997212660939,168.15994425321878,168.15994425321878
+86,86.0,172.0,27.166145848372253,152.83385415162866,305.6677083032573,125.66770830325731
+87,87.0,174.0,138.412263823353,41.58773617664792,83.17547235329585,83.17547235329585
+88,88.0,176.0,69.65838179833372,110.34161820166628,220.68323640333256,40.68323640333256
+89,89.0,178.0,0.9044997733162745,179.09550022668554,358.1910004533711,178.1910004533711
+90,90.0,1.0,112.15061774829701,67.84938225170481,135.69876450340962,135.69876450340962
+91,91.0,3.0,43.39673572327774,136.60326427672317,273.20652855344633,93.20652855344633
+92,92.0,5.0,154.64285369825848,25.357146301742432,50.714292603484864,50.714292603484864
+93,93.0,7.0,85.88897167323921,94.1110283267617,188.2220566535234,8.222056653523396
+94,94.0,9.0,17.135089648221765,162.86491035178005,325.7298207035601,145.7298207035601
+95,95.0,11.0,128.3812076232025,51.61879237679932,103.23758475359864,103.23758475359864
+96,96.0,13.0,59.62732559818323,120.37267440181859,240.74534880363717,60.74534880363717
+97,97.0,15.0,170.87344357316397,9.126556426836942,18.253112853673883,18.253112853673883
+98,98.0,17.0,102.1195615481447,77.88043845185621,155.76087690371241,155.76087690371241
+99,99.0,19.0,33.365679523127255,146.63432047687456,293.2686409537491,113.26864095374913
+100,100.0,21.0,144.611797498108,35.38820250189383,70.77640500378766,70.77640500378766
+101,101.0,23.0,75.85791547308872,104.1420845269131,208.2841690538262,28.28416905382619
+102,102.0,25.0,7.104033448069458,172.89596655193145,345.7919331038629,165.7919331038629
+103,103.0,27.0,118.35015142305019,61.64984857695072,123.29969715390143,123.29969715390143
+104,104.0,29.0,49.596269398032746,130.40373060196998,260.80746120393997,80.80746120393997
+105,105.0,31.0,160.84238737301348,19.15761262698834,38.31522525397668,38.31522525397668
+106,106.0,33.0,92.08850534799421,87.9114946520076,175.8229893040152,175.8229893040152
+107,107.0,35.0,23.33462332297495,156.66537667702687,313.33075335405374,133.33075335405374
+108,108.0,37.0,134.58074129795568,45.41925870204523,90.83851740409045,90.83851740409045
+109,109.0,39.0,65.82685927293642,114.17314072706449,228.34628145412898,48.346281454128984
+110,110.0,41.0,177.07297724791897,2.9270227520828485,5.854045504165697,5.854045504165697
+111,111.0,43.0,108.3190952228997,71.68090477710211,143.36180955420423,143.36180955420423
+112,112.0,45.0,39.56521319788044,140.43478680212138,280.86957360424276,100.86957360424276
+113,113.0,47.0,150.81133117286117,29.188668827139736,58.37733765427947,58.37733765427947
+114,114.0,49.0,82.05744914784191,97.942550852159,195.885101704318,15.885101704318004
+115,115.0,51.0,13.303567122824461,166.69643287717827,333.39286575435654,153.39286575435654
+116,116.0,53.0,124.5496850978052,55.450314902196624,110.90062980439325,110.90062980439325
+117,117.0,55.0,55.79580307278593,124.20419692721589,248.40839385443178,68.40839385443178
+118,118.0,57.0,167.04192104776666,12.958078952235155,25.91615790447031,25.91615790447031
+119,119.0,59.0,98.2880390227474,81.71196097725351,163.42392195450702,163.42392195450702
+120,120.0,61.0,29.534156997728132,150.46584300227187,300.93168600454374,120.93168600454374
+121,121.0,63.0,140.78027497271069,39.21972502729113,78.43945005458227,78.43945005458227
+122,122.0,65.0,72.02639294769142,107.9736070523104,215.9472141046208,35.9472141046208
+123,123.0,67.0,3.2725109226721543,176.72748907732966,353.45497815465933,173.45497815465933
+124,124.0,69.0,114.51862889765289,65.48137110234893,130.96274220469786,130.96274220469786
+125,125.0,71.0,45.76474687263362,134.2352531273682,268.4705062547364,88.47050625473639
+126,126.0,73.0,157.01086484761618,22.989135152385643,45.978270304771286,45.978270304771286
+127,127.0,75.0,88.25698282259691,91.74301717740491,183.48603435480982,3.486034354809817
+128,128.0,77.0,19.503100797577645,160.49689920242417,320.99379840484835,140.99379840484835
+129,129.0,79.0,130.74921877255838,49.25078122744344,98.50156245488688,98.50156245488688
+130,130.0,81.0,61.99533674753911,118.0046632524627,236.0093265049254,56.00932650492541
+131,131.0,83.0,173.24145472252167,6.758545277480152,13.517090554960305,13.517090554960305
+132,132.0,85.0,104.4875726975024,75.51242730249942,151.02485460499884,151.02485460499884
+133,133.0,87.0,35.733690672483135,144.26630932751868,288.53261865503737,108.53261865503737
+134,134.0,89.0,146.97980864746387,33.02019135253795,66.0403827050759,66.0403827050759
+135,135.0,91.0,78.2259266224446,101.77407337755722,203.54814675511443,23.54814675511443
+136,136.0,93.0,9.472044597427157,170.52795540257648,341.05591080515296,161.05591080515296
+137,137.0,95.0,120.71816257240789,59.28183742759393,118.56367485518786,118.56367485518786
+138,138.0,97.0,51.964280547388626,128.0357194526132,256.0714389052264,76.07143890522639
+139,139.0,99.0,163.21039852236936,16.78960147763246,33.57920295526492,33.57920295526492
+140,140.0,101.0,94.4565164973501,85.54348350265172,171.08696700530345,171.08696700530345
+141,141.0,103.0,25.70263447233083,154.297365527671,308.594731055342,128.59473105534198
+142,142.0,105.0,136.94875244731338,43.05124755268844,86.10249510537687,86.10249510537687
+143,143.0,107.0,68.19487042229412,111.8051295777077,223.6102591554154,43.610259155415406
+144,144.0,109.0,179.44098839727485,0.5590116027269687,1.1180232054539374,1.1180232054539374
+145,145.0,111.0,110.68710637225558,69.31289362774623,138.62578725549247,138.62578725549247
+146,146.0,113.0,41.93322434723632,138.0667756527655,276.133551305531,96.133551305531
+147,147.0,115.0,153.17934232221887,26.820657677784766,53.64131535556953,53.64131535556953
+148,148.0,117.0,84.4254602971996,95.57453970280221,191.14907940560443,11.149079405604425
+149,149.0,119.0,15.67157827218034,164.32842172782148,328.65684345564296,148.65684345564296
+150,150.0,121.0,126.91769624716108,53.082303752840744,106.16460750568149,106.16460750568149
+151,151.0,123.0,58.16381422214181,121.83618577786001,243.67237155572002,63.67237155572002
+152,152.0,125.0,169.40993219712254,10.590067802879275,21.18013560575855,21.18013560575855
+153,153.0,127.0,100.65605017210328,79.34394982789854,158.68789965579708,158.68789965579708
+154,154.0,129.0,31.902168147084012,148.097831852916,296.195663705832,116.19566370583198
+155,155.0,131.0,143.14828612206838,36.85171387793525,73.7034277558705,73.7034277558705
+156,156.0,133.0,74.39440409704912,105.60559590295452,211.21119180590904,31.21119180590904
+157,157.0,135.0,5.640522072029853,174.35947792797378,348.71895585594757,168.71895585594757
+158,158.0,137.0,116.88664004701059,63.11335995299305,126.2267199059861,126.2267199059861
+159,159.0,139.0,48.13275802199132,131.8672419780105,263.734483956021,83.734483956021
+160,160.0,141.0,159.37887599697206,20.621124003029763,41.242248006059526,41.242248006059526
+161,161.0,143.0,90.62499397195279,89.37500602804903,178.75001205609806,178.75001205609806
+162,162.0,145.0,21.871111946933524,158.1288880530683,316.2577761061366,136.2577761061366
+163,163.0,147.0,133.11722992191426,46.88277007808756,93.76554015617512,93.76554015617512
+164,164.0,149.0,64.363347896895,115.63665210310683,231.27330420621365,51.27330420621365
+165,165.0,151.0,175.60946587187573,4.390534128124273,8.781068256248545,8.781068256248545
+166,166.0,153.0,106.8555838468601,73.14441615314354,146.28883230628708,146.28883230628708
+167,167.0,155.0,38.101701821840834,141.8982981781628,283.7965963563256,103.79659635632561
+168,168.0,157.0,149.34781979682157,30.65218020318207,61.30436040636414,61.30436040636414
+169,169.0,159.0,80.5939377718023,99.40606222820134,198.81212445640267,18.81212445640267
+170,170.0,161.0,11.840055746783037,168.15994425321878,336.31988850643756,156.31988850643756
+171,171.0,163.0,123.08617372176377,56.91382627823805,113.8276525564761,113.8276525564761
+172,172.0,165.0,54.332291696744505,125.66770830325731,251.33541660651463,71.33541660651463
+173,173.0,167.0,165.57840967172524,14.42159032827658,28.84318065655316,28.84318065655316
+174,174.0,169.0,96.82452764670597,83.17547235329585,166.3509447065917,166.3509447065917
+175,175.0,171.0,28.070645621686708,151.9293543783151,303.8587087566302,123.85870875663022
+176,176.0,173.0,139.31676359666744,40.68323640333256,81.36647280666512,81.36647280666512
+177,177.0,175.0,70.56288157165181,109.43711842835182,218.87423685670365,38.87423685670365
+178,178.0,177.0,1.808999546632549,178.1910004533711,356.3820009067422,176.38200090674218
+179,179.0,179.0,113.05511752161328,66.94488247839035,133.8897649567807,133.8897649567807
+180,0.0,0.0,44.30123549659402,135.69876450340962,271.39752900681924,91.39752900681924
+181,1.0,2.0,155.54735347157475,24.452646528427067,48.905293056854134,48.905293056854134
+182,2.0,4.0,86.79347144655549,93.20652855344633,186.41305710689267,6.413057106892666
+183,3.0,6.0,18.03958942153622,161.9604105784656,323.9208211569312,143.9208211569312
+184,4.0,8.0,129.28570739651695,50.714292603484864,101.42858520696973,101.42858520696973
+185,5.0,10.0,60.53182537149769,119.46817462850413,238.93634925700826,58.93634925700826
+186,6.0,12.0,171.77794334647842,8.222056653523396,16.44411330704679,16.44411330704679
+187,7.0,14.0,103.0240613214628,76.97593867854084,153.95187735708168,153.95187735708168
+188,8.0,16.0,34.27017929644353,145.7298207035601,291.4596414071202,111.45964140712022
+189,9.0,18.0,145.51629727142426,34.483702728579374,68.96740545715875,68.96740545715875
+190,10.0,20.0,76.762415246405,103.23758475359864,206.47516950719728,26.47516950719728
+191,11.0,22.0,8.008533221385733,171.9914667786179,343.9829335572358,163.9829335572358
+192,12.0,24.0,119.25465119636647,60.74534880363717,121.49069760727434,121.49069760727434
+193,13.0,26.0,50.5007691713472,129.49923082865462,258.99846165730924,78.99846165730924
+194,14.0,28.0,161.74688714632794,18.253112853673883,36.50622570734777,36.50622570734777
+195,15.0,30.0,92.99300512130867,87.00699487869315,174.0139897573863,174.0139897573863
+196,16.0,32.0,24.239123096289404,155.76087690371241,311.52175380742483,131.52175380742483
+197,17.0,34.0,135.48524107127014,44.51475892873168,89.02951785746336,89.02951785746336
+198,18.0,36.0,66.73135904625451,113.26864095374913,226.53728190749825,46.537281907498254
+199,19.0,38.0,177.97747702123525,2.022522978768393,4.045045957536786,4.045045957536786
+200,20.0,40.0,109.22359499621598,70.77640500378766,141.55281000757532,141.55281000757532
+201,21.0,42.0,40.469712971196714,139.53028702880692,279.06057405761385,99.06057405761385
+202,22.0,44.0,151.71583094617745,28.28416905382619,56.56833810765238,56.56833810765238
+203,23.0,46.0,82.96194892115818,97.03805107884546,194.0761021576909,14.076102157690912
+204,24.0,48.0,14.208066896138916,165.7919331038629,331.5838662077258,151.5838662077258
+205,25.0,50.0,125.45418487111965,54.54581512888217,109.09163025776434,109.09163025776434
+206,26.0,52.0,56.700302846100385,123.29969715390143,246.59939430780287,66.59939430780287
+207,27.0,54.0,167.94642082108112,12.0535791789207,24.1071583578414,24.1071583578414
+208,28.0,56.0,99.19253879606549,80.80746120393997,161.61492240787993,161.61492240787993
+209,29.0,58.0,30.438656771046226,149.5613432289574,299.1226864579148,119.12268645791482
+210,30.0,60.0,141.68477474602696,38.31522525397668,76.63045050795336,76.63045050795336
+211,31.0,62.0,72.9308927210077,107.06910727899594,214.1382145579919,34.13821455799189
+212,32.0,64.0,4.177010695988429,175.8229893040152,351.6459786080304,171.64597860803042
+213,33.0,66.0,115.42312867096916,64.57687132903447,129.15374265806895,129.15374265806895
+214,34.0,68.0,46.6692466459499,133.33075335405374,266.6615067081075,86.66150670810748
+215,35.0,70.0,157.91536462093063,22.084635379071187,44.169270758142375,44.169270758142375
+216,36.0,72.0,89.16148259591137,90.83851740409045,181.6770348081809,1.6770348081809061
+217,37.0,74.0,20.4076005708921,159.59239942910972,319.18479885821944,139.18479885821944
+218,38.0,76.0,131.65371854587283,48.346281454128984,96.69256290825797,96.69256290825797
+219,39.0,78.0,62.89983652085721,117.10016347914825,234.2003269582965,54.2003269582965
+220,40.0,80.0,174.14595449583794,5.854045504165697,11.708091008331394,11.708091008331394
+221,41.0,82.0,105.39207247081868,74.60792752918496,149.21585505836993,149.21585505836993
+222,42.0,84.0,36.63819044579941,143.36180955420423,286.72361910840846,106.72361910840846
+223,43.0,86.0,147.88430842078014,32.115691579223494,64.23138315844699,64.23138315844699
+224,44.0,88.0,79.13042639576088,100.86957360424276,201.73914720848552,21.73914720848552
+225,45.0,90.0,10.376544370741613,169.62345562926203,339.24691125852405,159.24691125852405
+226,46.0,92.0,121.62266234572235,58.37733765427947,116.75467530855894,116.75467530855894
+227,47.0,94.0,52.86878032070308,127.13121967929874,254.26243935859748,74.26243935859748
+228,48.0,96.0,164.11489829568382,15.885101704318004,31.770203408636007,31.770203408636007
+229,49.0,98.0,95.36101627066455,84.63898372933727,169.27796745867454,169.27796745867454
+230,50.0,100.0,26.607134245648922,153.39286575435654,306.78573150871307,126.78573150871307
+231,51.0,102.0,137.85325222062966,42.14674777937398,84.29349555874796,84.29349555874796
+232,52.0,104.0,69.09937019561039,110.90062980439325,221.8012596087865,41.801259608786495
+233,53.0,106.0,0.3454881705911248,179.6545118294125,359.309023658825,179.30902365882503
+234,54.0,108.0,111.59160614557186,68.40839385443178,136.81678770886356,136.81678770886356
+235,55.0,110.0,42.83772412055259,137.16227587945104,274.3245517589021,94.32455175890209
+236,56.0,112.0,154.08384209553333,25.91615790447031,51.83231580894062,51.83231580894062
+237,57.0,114.0,85.32996007051406,94.67003992948776,189.3400798589755,9.340079858975514
+238,58.0,116.0,16.576078045494796,163.42392195450702,326.84784390901405,146.84784390901405
+239,59.0,118.0,127.82219602047553,52.17780397952811,104.35560795905621,104.35560795905621
+240,60.0,120.0,59.068313995456265,120.93168600454374,241.86337200908747,61.86337200908747
+241,61.0,122.0,170.31443197044064,9.685568029563001,19.371136059126002,19.371136059126002
+242,62.0,124.0,101.56054994542137,78.43945005458227,156.87890010916453,156.87890010916453
+243,63.0,126.0,32.806667920402106,147.19333207960153,294.38666415920306,114.38666415920306
+244,64.0,128.0,144.05278589538284,35.9472141046208,71.8944282092416,71.8944282092416
+245,65.0,130.0,75.29890387036357,104.70109612964006,209.40219225928013,29.402192259280127
+246,66.0,132.0,6.5450218453443085,173.45497815465933,346.90995630931866,166.90995630931866
+247,67.0,134.0,117.79113982032504,62.208860179678595,124.41772035935719,124.41772035935719
+248,68.0,136.0,49.03725779530578,130.96274220469786,261.9254844093957,81.92548440939572
+249,69.0,138.0,160.2833757702865,19.716624229717127,39.43324845943425,39.43324845943425
+250,70.0,140.0,91.52949374526725,88.47050625473639,176.94101250947278,176.94101250947278
+251,71.0,142.0,22.775611720251618,157.22438827975202,314.44877655950404,134.44877655950404
+252,72.0,144.0,134.02172969523235,45.978270304771286,91.95654060954257,91.95654060954257
+253,73.0,146.0,65.26784767021309,114.73215232979055,229.4643046595811,49.4643046595811
+254,74.0,148.0,176.51396564519382,3.486034354809817,6.972068709619634,6.972068709619634
+255,75.0,150.0,107.76008362017456,72.23991637982908,144.47983275965817,144.47983275965817
+256,76.0,152.0,39.00620159515529,140.99379840484835,281.9875968096967,101.9875968096967
+257,77.0,154.0,150.25231957013602,29.747680429867614,59.49536085973523,59.49536085973523
+258,78.0,156.0,81.49843754511676,98.50156245488688,197.00312490977376,17.00312490977376
+259,79.0,158.0,12.744555520097492,167.25544447990615,334.5108889598123,154.5108889598123
+260,80.0,160.0,123.99067349507823,56.00932650492541,112.01865300985082,112.01865300985082
+261,81.0,162.0,55.23679147005896,124.76320852994468,249.52641705988935,69.52641705988935
+262,82.0,164.0,166.48290944504333,13.517090554960305,27.03418110992061,27.03418110992061
+263,83.0,166.0,97.72902742002407,82.27097257997957,164.54194515995914,164.54194515995914
+264,84.0,168.0,28.9751453950048,151.02485460499884,302.0497092099977,122.04970920999767
+265,85.0,170.0,140.22126336998554,39.7787366300181,79.5574732600362,79.5574732600362
+266,86.0,172.0,71.46738134496627,108.53261865503737,217.06523731007474,37.065237310074735
+267,87.0,174.0,2.7134993199470046,177.28650068005663,354.57300136011327,174.57300136011327
+268,88.0,176.0,113.95961729492774,66.0403827050759,132.0807654101518,132.0807654101518
+269,89.0,178.0,45.20573526990847,134.79426473009516,269.58852946019033,89.58852946019033
+270,90.0,1.0,156.4518532448892,23.54814675511443,47.09629351022886,47.09629351022886
+271,91.0,3.0,87.69797121986994,92.3020287801337,184.6040575602674,4.6040575602673925
+272,92.0,5.0,18.944089194854314,161.05591080515296,322.1118216103059,142.11182161030592
+273,93.0,7.0,130.19020716983505,49.80979283016859,99.61958566033718,99.61958566033718
+274,94.0,9.0,61.43632514481578,118.56367485518786,237.1273497103757,57.12734971037571
+275,95.0,11.0,172.68244311979652,7.317556880207121,14.635113760414242,14.635113760414242
+276,96.0,13.0,103.92856109477725,76.07143890522639,152.14287781045277,152.14287781045277
+277,97.0,15.0,35.174679069757985,144.82532093024565,289.6506418604913,109.6506418604913
+278,98.0,17.0,146.42079704473872,33.57920295526492,67.15840591052984,67.15840591052984
+279,99.0,19.0,77.66691501971945,102.33308498028418,204.66616996056837,24.666169960568368
+280,100.0,21.0,8.913032994700188,171.08696700530345,342.1739340106069,162.1739340106069
+281,101.0,23.0,120.15915096968092,59.840849030322715,119.68169806064543,119.68169806064543
+282,102.0,25.0,51.40526894466166,128.59473105534198,257.18946211068396,77.18946211068396
+283,103.0,27.0,162.65138691964603,17.348613080361247,34.697226160722494,34.697226160722494
+284,104.0,29.0,93.89750489462676,86.10249510537687,172.20499021075375,172.20499021075375
+285,105.0,31.0,25.143622869607498,154.85637713039614,309.7127542607923,129.71275426079228
+286,106.0,33.0,136.38974084458823,43.610259155415406,87.22051831083081,87.22051831083081
+287,107.0,35.0,67.63585881956897,112.36414118043467,224.72828236086934,44.72828236086934
+288,108.0,37.0,178.8819767945497,1.1180232054539374,2.236046410907875,2.236046410907875
+289,109.0,39.0,110.12809476953043,69.8719052304732,139.7438104609464,139.7438104609464
+290,110.0,41.0,41.37421274451117,138.62578725549247,277.25157451098494,97.25157451098494
+291,111.0,43.0,152.6203307194919,27.379669280511735,54.75933856102347,54.75933856102347
+292,112.0,45.0,83.86644869447264,96.133551305531,192.267102611062,12.267102611062
+293,113.0,47.0,15.112566669453372,164.88743333055027,329.77486666110053,149.77486666110053
+294,114.0,49.0,126.35868464443774,53.64131535556953,107.28263071113906,107.28263071113906
+295,115.0,51.0,57.60480261941848,122.39519738058516,244.79039476117032,64.79039476117032
+296,116.0,53.0,168.8509205943992,11.149079405604425,22.29815881120885,22.29815881120885
+297,117.0,55.0,100.09703856937995,79.90296143062369,159.80592286124738,159.80592286124738
+298,118.0,57.0,31.34315654436068,148.65684345564296,297.3136869112859,117.31368691128591
+299,119.0,59.0,142.58927451934142,37.41072548066222,74.82145096132444,74.82145096132444
Index: .idea/GitLink.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/GitLink.xml b/.idea/GitLink.xml
new file mode 100644
--- /dev/null	(date 1759539810001)
+++ b/.idea/GitLink.xml	(date 1759539810001)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="uk.co.ben_gibson.git.link.SettingsState">
+    <option name="host" value="72037fcc-cb9c-4c22-960a-ffe73fd5e229" />
+  </component>
+</project>
\ No newline at end of file
Index: examples/golden_brain_dezip.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/usr/bin/env python3\r\n\"\"\"\r\ngolden-angle tomography example with phantom zip extraction\r\n\"\"\"\r\n#--------------------------------------------\r\nimport numpy as np\r\nimport glob\r\nimport os\r\nimport zipfile\r\n\r\nos.environ['LD_LIBRARY_PATH'] = '/usr/local/cuda-12.1/lib64:' + os.environ.get('LD_LIBRARY_PATH', '')\r\n\r\nfrom msim.simulator import XRayScanner\r\n#--------------------------------------------\r\n# estrai file Zarr dal zip se esiste\r\nzip_file = \"phantom_brain.zarr.zip\"\r\nphantom_dir = \"phantom_brain.zarr\"\r\n\r\nif os.path.exists(zip_file):\r\n    print(f\"Estrazione {zip_file}...\")\r\n    with zipfile.ZipFile(zip_file, 'r') as zip_ref:\r\n        zip_ref.extractall(\".\")\r\n    print(f\"Estrazione completata: {phantom_dir}\")\r\nelse:\r\n    print(f\"Nessun file zip trovato, cercando cartella {phantom_dir}\")\r\n\r\n#--------------------------------------------\r\n#--------------------------------------------\r\n# trova files phantom json\r\njson_files = glob.glob(\"*.json\")\r\nprint(\"files Json found :\", json_files)\r\n\r\n# trova cartelle phantom zarr (non solo file!)\r\nphantoms = [d for d in os.listdir(\".\") if d.endswith(\".zarr\") and os.path.isdir(d)]\r\nprint(\"phantom Zarr found:\", phantoms)\r\n\r\nphantom_file = phantom_dir if os.path.isdir(phantom_dir) else (phantoms[0] if phantoms else None)\r\nphantom_json = \"phantom_brain.json\" if \"phantom_brain.json\" in json_files else (json_files[0] if json_files else None)\r\n\r\nif phantom_file is None or phantom_json is None:\r\n    raise FileNotFoundError(\"No phantom or JSON files found in the folder\")\r\n\r\nprint(\"Usando phantom:\", phantom_file)\r\nprint(\"Usando json metadata:\", phantom_json)\r\n\r\n#--------------------------------------------\r\n# setup scanner \r\nconfig_file = \"enhanced_config.json\" if \"enhanced_config.json\" in json_files else json_files[0]\r\nprint(\"Usando configurazione:\", config_file)\r\n\r\nscanner = XRayScanner(config_file)\r\nscanner.load_volume(phantom_file, phantom_json)\r\n#--------------------------------------------\r\n# golden angles array \r\ngolden_a = 180*(3 - np.sqrt(5)) / 2  # deg\r\ngolden_a_rad = golden_a*np.pi / 180  # rad \r\nnum_proj = 360    # select number of projections\r\ntheta_start = 30  # start angle deg\r\n\r\ngolden_angles_tomo = np.mod(theta_start + np.arange(num_proj) * golden_a, 180)\r\nprint(\" 10 golden angles (float):\", golden_angles_tomo[:10])\r\n\r\n# scan golden-angle\r\nprojections, dose_stats = scanner.tomography_scan(\r\n    golden_angles_tomo,\r\n    \"golden_tomo_with_dose.h5\",  # salva i dati della proiez\r\n    calculate_dose=False\r\n)\r\n\r\n# golden-angle sorted \r\ngolden_angles_tomo_sorted = np.sort(golden_angles_tomo)  # golden angles sorted\r\nprint(\"10 angles sorted\", golden_angles_tomo_sorted[:10])\r\n\r\n# scan golden-angle sorted \r\nprojections_sorted, dose_stats_sorted = scanner.tomography_scan(\r\n    golden_angles_tomo_sorted,\r\n    \"golden_angles_tomo_sorted.h5\",\r\n    calculate_dose=False\r\n)\r\nprint(\"Golden-angle scans complete\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/examples/golden_brain_dezip.py b/examples/golden_brain_dezip.py
--- a/examples/golden_brain_dezip.py	(revision 50a9c06bf40b6d4021d94c65c551f2e9cd2c81d4)
+++ b/examples/golden_brain_dezip.py	(date 1759545421014)
@@ -1,80 +1,112 @@
 #!/usr/bin/env python3
 """
-golden-angle tomography example with phantom zip extraction
+Golden-angle tomography con visualizzazione Napari
+Carica brain_map.zarr come array NumPy, usa JSON metadati
+Trasforma etichette in valori fisici di attenuazione X-ray (mu)
+Salva le proiezioni ordinate come stack .npy e .png
+Mostra una slice test e lo stack completo con Napari
 """
-#--------------------------------------------
-import numpy as np
-import glob
 import os
-import zipfile
-
-os.environ['LD_LIBRARY_PATH'] = '/usr/local/cuda-12.1/lib64:' + os.environ.get('LD_LIBRARY_PATH', '')
+import numpy as np
+import zarr
+import json
+import matplotlib.pyplot as plt
+import sys
+sys.path.append("/mnt/c/Users/noemi/Desktop/Noe")
 
 from msim.simulator import XRayScanner
-#--------------------------------------------
-# estrai file Zarr dal zip se esiste
-zip_file = "phantom_brain.zarr.zip"
-phantom_dir = "phantom_brain.zarr"
-
-if os.path.exists(zip_file):
-    print(f"Estrazione {zip_file}...")
-    with zipfile.ZipFile(zip_file, 'r') as zip_ref:
-        zip_ref.extractall(".")
-    print(f"Estrazione completata: {phantom_dir}")
-else:
-    print(f"Nessun file zip trovato, cercando cartella {phantom_dir}")
-
-#--------------------------------------------
-#--------------------------------------------
-# trova files phantom json
-json_files = glob.glob("*.json")
-print("files Json found :", json_files)
-
-# trova cartelle phantom zarr (non solo file!)
-phantoms = [d for d in os.listdir(".") if d.endswith(".zarr") and os.path.isdir(d)]
-print("phantom Zarr found:", phantoms)
-
-phantom_file = phantom_dir if os.path.isdir(phantom_dir) else (phantoms[0] if phantoms else None)
-phantom_json = "phantom_brain.json" if "phantom_brain.json" in json_files else (json_files[0] if json_files else None)
-
-if phantom_file is None or phantom_json is None:
-    raise FileNotFoundError("No phantom or JSON files found in the folder")
-
-print("Usando phantom:", phantom_file)
-print("Usando json metadata:", phantom_json)
+import napari
 
 #--------------------------------------------
-# setup scanner 
-config_file = "enhanced_config.json" if "enhanced_config.json" in json_files else json_files[0]
-print("Usando configurazione:", config_file)
+def main():
+    base_path = "/mnt/c/Users/noemi/Desktop/Noe/examples"
+    zarr_file = os.path.join(base_path, "brain_map.zarr")
+    json_file = os.path.join(base_path, "brain_lookup.json")
+    config_file = os.path.join(base_path, "enhanced_config.json")
+
+    for f in [zarr_file, json_file, config_file]:
+        if not os.path.exists(f):
+            raise FileNotFoundError(f"{f} non trovato")
 
-scanner = XRayScanner(config_file)
-scanner.load_volume(phantom_file, phantom_json)
-#--------------------------------------------
-# golden angles array 
-golden_a = 180*(3 - np.sqrt(5)) / 2  # deg
-golden_a_rad = golden_a*np.pi / 180  # rad 
-num_proj = 360    # select number of projections
-theta_start = 30  # start angle deg
+    # Carica Zarr come array NumPy
+    print(f"Caricando Zarr originale: {zarr_file}")
+    z = zarr.open(zarr_file, mode='r')
+    volume_data = z[:]
+    print(f"Volume shape: {volume_data.shape}")
+
+    # Carica metadati JSON
+    with open(json_file, 'r') as f:
+        metadata = json.load(f)
+
+    lookup = metadata["lookup"]
+    voxel_size = metadata.get("voxel_size", [1.0, 1.0, 1.0])
+
+    # Trasforma volume etichettato in valori di attenuazione (mu)
+    print("Trasformando volume etichettato in valori fisici di attenuazione...")
+    volume_mu = np.zeros_like(volume_data, dtype=np.float32)
+    for label_str, props in lookup.items():
+        label = int(label_str)
+        mu = props["mu"]
+        volume_mu[volume_data == label] = mu
+    print("Min/Max mu:", volume_mu.min(), volume_mu.max())
+
+    # Setup scanner
+    scanner = XRayScanner(config_file)
+    scanner.volume = volume_mu
+    scanner.lookup = lookup
+    scanner.voxel_size = voxel_size
 
-golden_angles_tomo = np.mod(theta_start + np.arange(num_proj) * golden_a, 180)
-print(" 10 golden angles (float):", golden_angles_tomo[:10])
+    # Golden-angle scan
+    golden_a = 180*(3 - np.sqrt(5)) / 2
+    num_proj = 400
+    theta_start = 0
+    golden_angles_tomo = np.mod(theta_start + np.arange(num_proj) * golden_a, 180)
+    print("10 golden angles:", golden_angles_tomo[:10])
 
-# scan golden-angle
-projections, dose_stats = scanner.tomography_scan(
-    golden_angles_tomo,
-    "golden_tomo_with_dose.h5",  # salva i dati della proiez
-    calculate_dose=False
-)
+    # Scan golden-angle
+    projections, dose_stats = scanner.tomography_scan(
+        golden_angles_tomo,
+        os.path.join(base_path, "golden_tomo_with_dose.h5"),
+        calculate_dose=False
+    )
 
-# golden-angle sorted 
-golden_angles_tomo_sorted = np.sort(golden_angles_tomo)  # golden angles sorted
-print("10 angles sorted", golden_angles_tomo_sorted[:10])
-
-# scan golden-angle sorted 
-projections_sorted, dose_stats_sorted = scanner.tomography_scan(
-    golden_angles_tomo_sorted,
-    "golden_angles_tomo_sorted.h5",
-    calculate_dose=False
-)
-print("Golden-angle scans complete")
+    # Scan golden-angle ordinata
+    golden_angles_tomo_sorted = np.sort(golden_angles_tomo)
+    projections_sorted, dose_stats_sorted = scanner.tomography_scan(
+        golden_angles_tomo_sorted,
+        os.path.join(base_path, "golden_angles_tomo_sorted.h5"),
+        calculate_dose=False
+    )
+    print("Golden-angle scans complete")
+
+    # Salva stack di proiezioni ordinate
+    stack_file = os.path.join(base_path, "stack_projections_sorted.npy")
+    np.save(stack_file, projections_sorted)
+    print(f"Stack di proiezioni salvato in: {stack_file}")
+
+    # Salva singole proiezioni come PNG
+    out_folder = os.path.join(base_path, "proiezioni_png")
+    os.makedirs(out_folder, exist_ok=True)
+    for i, proj in enumerate(projections_sorted):
+        plt.imsave(os.path.join(out_folder, f"proj_{i:03d}.png"), proj, cmap='gray')
+    print(f"Singole proiezioni salvate in cartella: {out_folder}")
+
+    # Visualizza slice test con Matplotlib
+    slice_idx = volume_mu.shape[0] // 2
+    plt.figure(figsize=(12, 6))
+    plt.subplot(1, 2, 1)
+    plt.title("Slice centrale volume (mu)")
+    plt.imshow(volume_mu[slice_idx], cmap='gray')
+    plt.subplot(1, 2, 2)
+    plt.title("Prima proiezione")
+    plt.imshow(projections_sorted[0], cmap='gray')
+    plt.show()
+
+    # Visualizza lo stack completo con Napari
+    viewer = napari.Viewer()
+    viewer.add_image(projections_sorted, name='Golden-angle projections sorted')
+    napari.run()
+
+#--------------------------------------------
+if __name__ == "__main__":
+    main()
